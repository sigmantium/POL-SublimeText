{
  "AddAmount":
  {
    "prototype": "AddAmount( item, amount )",
    "parameter": [
      {
        "_name": "item",
        "_value": "Item reference"
      },
      {
        "_name": "amount",
        "_value": "An integer 1-60000"
      }
    ],
    "explain": "Adds the specified amount to a stack of items. Amount is between 1 and 60000",
    "return": "1 or error",
    "error": [
      "\"That item is being used\" (if inuse or reserved)",
      "\"That item type is not stackable\"",
      "\"Can't add that much to that stack\" (if resulting amount > 60000)",
      "\"Invalid Parameter type\""
    ],
    "related": "Item",
    "_name": "AddAmount"
  },
  "ConsumeReagents":
  {
    "prototype": "ConsumeReagents( who, spellid )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "spellid",
        "_value": "An integer"
      }
    ],
    "explain": "Removes reagent items from caster's pack according to spellid's definition in spells.cfg. Spells.cfg \nfiles define spells & spell ids.",
    "return": "1 on successful consume, 0 if not enough of defined reagents",
    "error": [
      "\"Spell ID out of range\" if !(spellid >= 1 && spellid <= last spellid)",
      "\"No such spell\" if spellid not found",
      "\"Invalid parameter\""
    ],
    "related": "Character",
    "relatedcfg": "spells.cfg",
    "_name": "ConsumeReagents"
  },
  "ConsumeSubstance":
  {
    "prototype": "ConsumeSubstance( container, objtype, amount )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype to find and consume"
      },
      {
        "_name": "amount",
        "_value": "An integer"
      }
    ],
    "explain": "Subtracts \"amount\" of type \"objtype\", starting in container \n\"container\"",
    "return": "1 or Error",
    "error": [
      "\"That is not a container\" if container.isa(POLCLASS_CONTAINER) == false",
      "\"Amount cannot be negative\" if amount < 0",
      "\"Not enough of that substance in container\"",
      "\"Invalid parameter type\""
    ],
    "related": "Container",
    "_name": "ConsumeSubstance"
    },
  "CreateItemInInventory":
  {
    "prototype": "CreateItemInInventory( container, objtype, amount := 1 )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype for item to be created, OR String ObjtypeName, OR GetItemDescriptor struct."
      },
      {
        "_name": "amount",
        "_value": "size of stack to be created. Default = 1"
      }
    ],
    "explain": [
      "Creates a stack of items in the specified container. As usual, objtype\n  must be valid and amount must be 1..60000. FORCES STACKING: If the specified obytpe is not stackable \nby \n  default (i.e. most weapons), this function WILL CREATE A STACK! This will cause a client crash if \ncontainer \n  is a player's pack! Therefore, this function SHOULD ONLY BE USED WITH NPC MERCHANTS' STORAGE AREA \n  INVENTORIES! For normal containers, use CreateItemInContainer().",
      "Note: Will call the container's canInsert and onInsert scripts."
    ],
    "return": "Item reference or Error",
    "error": [
      "\"A parameter was invalid\"",
      "\"That is not a container\" if container.isa(POLCLASS_CONTAINER) == false",
      "\"That container is full\" if weight would be > 65535, or if would exceed maximum # of items",
      "\"Failed to create that item type\"",
      "\"Could not insert item into container.\" if canInsert script returns false"
    ],
    "related": [
      "Container",
      "Item"
    ],
    "relatedcfg": "itemdesc.cfg",
    "_name": "CreateItemInInventory"
    },
  "FindObjtypeInContainer":
  {
    "prototype": "FindObjtypeInContainer( container, objtype, flags:=FINDOBJTYPE_RECURSIVE )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container reference"
      },
      {
        "_name": "objtype",
        "_value": "integer objtype to find"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Returns an Item Reference to the first found item matching objtype starting in \"container\".",
      {
        "code": "// FindObjtype constants\nconst FINDOBJTYPE_RECURSIVE     := 0x0; // Search in sub-containers (DEFAULT).\nconst FINDOBJTYPE_IGNORE_LOCKED := 0x1; // Find matches in locked containers\nconst FINDOBJTYPE_ROOT_ONLY     := 0x2; // Do not find matches in sub-containers.",
        "__text": "uo.em constants for flags:"
      }
    ],
    "return": "Item reference or Error",
    "error": [
      "\"Invalid parameter type\"",
      "\"That is not a container\" if container.isa(POLCLASS_CONTAINER) == false",
      "\"No items were found\""
    ],
    "related": [
      "Container",
      "Item"
    ],
    "_name": "FindObjtypeInContainer"
    },
  "GetEquipmentByLayer":
  {
    "prototype": "GetEquipmentByLayer( character, layer )",
    "parameter": [
      {
        "_name": "Character",
        "_value": "Character reference"
      },
      {
        "_name": "layer",
        "_value": "An integer"
      }
    ],
    "explain": "Gets an item reference to an equipped item. For proper layer values, see \nscripts/include/client.inc",
    "return": "Itemref or Error",
    "error": [
      "\"Invalid layer\"",
      "\"Nothing equipped on that layer.\"",
      "\"Invalid parameter\""
    ],
    "related": [
      "Character",
      "Item"
    ],
    "_name": "GetEquipmentByLayer"
    },
  "GetObjPropertyNames":
  {
    "prototype": "GetObjPropertyNames( object )",
    "parameter": {
      "_name": "object",
      "_value": "UObject reference"
    },
    "explain": "Gets all the CProp names set on the object. Use GetObjProperty(object, returned_array[i]) to get the \nCProp value.",
    "return": "Array of strings or Error",
    "error": "\"Invalid parameter type\"",
    "related": [
      "UObject",
      "Array"
    ],
    "_name": "GetObjPropertyNames"
    },
  "GetObjtypeByName":
  {
    "prototype": "GetObjtypeByName( name )",
    "parameter": {
      "_name": "name",
      "_value": "string"
    },
    "explain": "Finds the matching Object Type number for the obejct named \"name\" Matches on the itemdesc.cfg property \n\"Name\".",
    "return": "Integer ObjType or Error",
    "error": [
      "\"No objtype by that name\"",
      "\"Invalid parameter\""
    ],
    "relatedcfg": "itemdesc.cfg",
    "_name": "GetObjTypeByName"
    },
  "GetObjType":
  {
    "prototype": "GetObjType( object )",
    "parameter": {
      "_name": "object",
      "_value": "UObject Reference"
    },
    "explain": "Returns the Objtype of an object. Same as ref.objtype. Works for item root classed and character root classed.",
    "return": "Integer ObjType or 0",
    "related": [
      "Character",
      "Item"
    ],
    "relatedcfg": "itemdesc.cfg",
    "_name": "GetObjType"
    },
  "ListItemsAtLocation":
  {
    "prototype": "ListItemsAtLocation( x, y, z, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Returns a list of items at the specified x,y,z. test ret != 0",
      "Use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "<uninitialized object> if invalid parameters, or Array of Item References of items at that location.",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListItemsAtLocation"
    },
  "ListObjectsInBox":
  {
    "prototype": "ListObjectsInBox( x1,y1,z1, x2,y2,z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Lists all items & mobiles inside an imaginary box. Finds both characters (PCs & NPCs) and items",
      "Notes: This function will not generate \"Invalid Coordinates for realm\" Error, because some Scripter \"loves\" this \"bug\" :o/"
    ],
    "return": "Error or Array of all characters and items found inside the specified box.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Item",
      "Character",
      "Array"
    ],
    "_name": "ListObjectsInBox"
    },
  "ListItemsInBoxOfObjType":
  {
    "prototype": "ListItemsInBoxOfObjType( objtype, x1,y1,z1, x2,y2,z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "objtype",
        "_value": "An integer value. The ObjType to search for."
      },
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Lists all items inside an imaginary box. Finds items with ObjType numbers matching objtype.",
      "Notes: This function will not generate \"Invalid Coordinates for realm\" Error, because some Scripter \"loves\" this \"bug\" :o/"
    ],
    "return": "Error or Array of items found inside the specified box with the matching ObjType.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListItemsInBoxOfObjType"
    },
  "ListObjectsInBoxOfClass":
  {
    "prototype": "ListObjectsInBoxOfClass( POL_Class, x1,y1,z1, x2,y2,z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "POL_Class",
        "_value": "A POL class to search for eg. POLCLASS_"
      },
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Lists all items inside an imaginary box. Finds items matching the POL_Class.",
      "Notes: This function will not generate \"Invalid Coordinates for realm\" Error, because some Scripter \"loves\" this \"bug\" :o/"
    ],
    "return": "Error or Array of items found inside the specified box with the matching POL_Class.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Array",
      "Character",
      "Item"
    ],
    "_name": "ListObjectsInBoxOfClass"
    },
  "ListMobilesInBox":
  {
    "prototype": "ListMobilesInBox( x1,y1,z1, x2,y2,z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": "like ListObjectsInBox but returns only mobiles",
    "return": "Error or Array of all characters found inside the specified box.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Character",
      "Array"
    ],
    "_name": "ListMobilesInBox"
    },
  "ReleaseItem":
  {
    "prototype": "ReleaseItem( item )",
    "parameter": {
      "_name": "item",
      "_value": "Item Reference"
    },
    "explain": "Releases an item previously reserved by ReserveItem().",
    "return": "1 on success or Error",
    "error": [
      "\"That item is not reserved by this script.\" if item is not reserved (using ReserveItem())",
      "\"That item is not reserved.\" if the item is not \"in use\"",
      "\"Invalid parameter\""
    ],
    "related": "Item",
    "_name": "ReleaseItem"
    },
  "ReserveItem":
  {
    "prototype": "ReserveItem( item )",
    "parameter": {
      "_name": "item",
      "_value": "Item Reference"
    },
    "explain": {
      "code": "if(!ReserveItem(item))\n  SendSysMessage(who, \"You cannot use that.\");\n  return;\nendif",
      "__text": "Reserves an item so no other script or client may manipulate it until ReleaseItem() is called.\n  Use this function to prevent nasty exploits like this:"
    },
    "return": "1 Item has been reserved by me. 2 Item was already reserved by me. Or Error",
    "error": [
      "\"That item is already being used.\"",
      "\"Invalid parameter\""
    ],
    "related": "Item",
    "_name": "ReserveItem"
    },
  "AssignRectToWeatherRegion":
  {
    "prototype": "AssignRectToWeatherRegion( region, xwest, ynorth, xeast, ysouth )",
    "parameter": [
      {
        "_name": "region",
        "_value": "string"
      },
      {
        "_name": "xwest",
        "_value": "integer"
      },
      {
        "_name": "ynorth",
        "_value": "integer"
      },
      {
        "_name": "xeast",
        "_value": "integer"
      },
      {
        "_name": "ysouth",
        "_value": "integer"
      }
    ],
    "explain": "Sets the range for weather region named \"region\". Useful for making moving storms.\n  Notes: Weather region strings as defined in regions/weather.cfg",
    "return": "1 on success",
    "error": [
      "\"Invalid Parameter type\"",
      "\"Weather region not found\""
    ],
    "relatedcfg": "weather.cfg",
    "_name": "AssignRectToWeatherRegion"
    },
  "GetRegionLightLevelAtLocation":
  {
    "prototype": "GetRegionLightLevelAtLocation( x, y, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "x location"
      },
      {
        "_name": "y",
        "_value": "y location"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": "Get lightlevel of [light] region for coordinates.",
    "return": "Integer value of lightlevel on success",
    "error": [
      "\"Invalid Parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for realm\""
    ],
    "relatedcfg": [
      "regions.cfg",
      "light.cfg"
    ],
    "_name": "GetRegionLightLevelAtLocation"
    },
  "GetRegionName":
  {
    "prototype": "GetRegionName( object )",
    "parameter": {
      "_name": "object",
      "_value": "top level UObject (item/character/npc/etc)"
    },
    "explain": "Get name of [justice] region that Object is in.",
    "return": "String value of \"Region Name\" on success",
    "error": [
      "\"Invalid Parameter\"",
      "\"No Region defined at this Location\""
    ],
    "relatedcfg": "regions.cfg",
    "_name": "GetRegionName"
    },
  "GetRegionNameAtLocation":
  {
    "prototype": "GetRegionNameAtLocation( x, y, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "x location"
      },
      {
        "_name": "y",
        "_value": "y location"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": "Get name of [justice] region for coordinates.",
    "return": "String value of \"Region Name\" on success",
    "error": [
      "\"Invalid Parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for realm\"",
      "\"No Region defined at this Location\""
    ],
    "relatedcfg": "regions.cfg",
    "_name": "GetRegionNameAtLocation"
    },
  "GetRegionString":
  {
    "prototype": "GetRegionString( resource, x, y, propertyname, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "resource",
        "_value": "string"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "propertyname",
        "_value": "string"
      }
    ],
    "explain": [
      "Allows you to look up custom properties within a resource region entry.",
      "\"resource\" is a string that matches a resource type in regions/resource.cfg, i.e. \"ore\". \n  x,y is the coordinate to look up in the regions defined in resources/ore.cfg (or the \n  filename matching the supplied resource).",
      {
        "code": "Example: in regions/resource.cfg there exists a ResourceType \"ore\". In ore.cfg \n         there exists a region:\nRegion Outer Covetous \n{ \n    UnitsPerArea        15 \n    SecondsPerRegrow    300 \n    Capacity            20000 \n    Range        2299 784 2635 967 \n    Prop         value_string    -- this is a custom property not used by the core\n} \nGetRegionString(\"ore\",2299,785,\"Prop\"); would return \"value_string\"",
        "__text": "\"property_name\" is the _custom_ property to match (i.e. UnitsPerArea, SecondsPerRegrow, \n  Capacity, Range are NOT matched) in the found region."
      }
    ],
    "return": "String value of \"propertyname\" on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"No resource by that name\" if \"resource\" not found in regions/resource.cfg",
      "\"No resource region at that location\" if the given x,y is not defined inside any of the regions in regions/[resource string].cfg",
      "\"Property not found\" if \"propertyname\" was not found in the matching region."
    ],
    "relatedcfg": "regions.cfg",
    "_name": "GetRegionString"
    },
  "SetRegionWeatherLevel":
  {
    "prototype": "SetRegionWeatherLevel( region, type, severity, aux := 0, lightoverride := -1)",
    "parameter": [
      {
        "_name": "region",
        "_value": "string"
      },
      {
        "_name": "type",
        "_value": "integer"
      },
      {
        "_name": "severity",
        "_value": "integer"
      },
      {
        "_name": "aux",
        "_value": "integer (optional, see above for default values)"
      },
      {
        "_name": "lightoverride",
        "_value": "integer (optional, see above for default values)"
      }
    ],
    "explain": [
      "Sets the weather effects for a given weather region.",
      {
        "code": "Notes: Weather values by Tharaxis\ntype:\n    0 - light rain (\"It starts to rain\")\n    1 - rain/thunder (\"A fierce storm approaches\")\n    2 - snow (\"It begins to snow\")\n    3 - brewing storm - (\"A storm is brewing\")\n    255 - None (Turns sound effects off)\n      \n    severity:is set on a 0-70 scale, 70=torrential rain, 0=light drizzle.     \n    aux: ??? \n    lightoverride: light level amount overrides current level. -1 means no override."
      }
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid Parameter type\"",
      "\"Weather region not found\" if \"region\" not found in regions/weather.cfg"
    ],
    "relatedcfg": "weather.cfg",
    "_name": "SetRegionWeatherLevel"
    },
  "CreateAccount":
  {
    "prototype": "CreateAccount( acctname, password, enabled )",
    "parameter": [
      {
        "_name": "acctname",
        "_value": "string"
      },
      {
        "_name": "password",
        "_value": "string"
      },
      {
        "_name": "enabled",
        "_value": "integer (0 or 1)"
      }
    ],
    "explain": [
      "Creates a new player account with the specified account name, password.",
      "Notes: If enabled == 0, player cannot log in.",
      "Only accepts Alphanumeric characters for account name. Control characters, '{' '}', and spaces not allowed.",
      "Passwords cannot contain whitespace or control characters."
    ],
    "return": "Account Reference for the new account on success",
    "error": [
      "\"Account already exists\"",
      "\"Invalid parameter type\"",
      "\"Attempted to create account with non-alphanumeric characters.\"",
      "\"Attempted to use password in account creation with non-allowed characters.\""
    ],
    "related": "Account",
    "_name": "CreateAccount"
    },
  "FindAccount":
  {
    "prototype": "FindAccount( acctname )",
    "parameter": {
      "_name": "acctname",
      "_value": "string"
    },
    "explain": "Gets a player Account Reference by the name of the account.",
    "return": "Account Reference on success",
    "error": [
      "\"Account not found.\"",
      "\"Invalid parameter type\""
    ],
    "related": "Account",
    "_name": "FindAccount"
    },
  "ListAccounts":
  {
    "prototype": "ListAccounts()",
    "explain": "Gets a list of all account names.",
    "return": "Array of Strings of account names.",
    "related": [
      "Array",
      "Account"
    ],
    "_name": "ListAccounts"
    },
  "DestroyMulti":
  {
    "prototype": "DestroyMulti( multi )",
    "parameter": {
      "_name": "multi",
      "_value": "Multi Reference"
    },
    "explain": [
      "Deletes a Multi item from the world.",
      "Notes: House: Moves all characters and items inside multi to ground.\n         Boat: Requires hold be empty, deck be empty, and have no mobiles logged-out on boat."
    ],
    "return": "1 on success",
    "error": [
      "\"WTF!? Don't know what kind of multi that is!\" if not a boat or a house",
      "\"Invalid parameter type\"",
      "Boat Errors:\"There is cargo in the ship's hold\"",
      "\"There are logged-out characters on the deck\"",
      "\"The deck is not empty\""
    ],
    "related": [
      "House",
      "Boat"
    ],
    "_name": "DestroyMulti"
    },
  "DisableEvents":
  {
    "prototype": "DisableEvents( eventtype )",
    "parameter": {
      "_name": "eventtype",
      "_value": "integer combination (bitwise-OR) of constants from SYSEVENT.INC"
    },
    "explain": "Disables the system event(s) defined in sysevent.inc for the current NPC or item control script. Do not use for \"user\" events (see EnableEvents()).",
    "return": "New event mask on success",
    "error": "\"Invalid parameter\"",
    "_name": "DisableEvents"
    },
  "SendEvent":
  {
    "prototype": "SendEvent( npc, event )",
    "parameter": [
      {
        "_name": "npc",
        "_value": "Character Reference to an NPC"
      },
      {
        "_name": "event",
        "_value": "integer"
      }
    ],
    "explain": "Sends the integer event (either a combination of system events, or one user-defined event) to the \nNPC's control script.",
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"That mobile is not an NPC\"",
      "\"That NPC doesn't have a control script\"",
      "\"Event queue is full, discarding event\""
    ],
    "related": "NPC",
    "_name": "SendEvent"
    },
  "SendHousingTool":
  {
    "prototype": "SendHousingTool( who, house )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "house",
        "_value": "House Reference"
      }
    ],
    "explain": [
      "Sends the custom housing tool to Character",
      "house.setcustom(1) is needed before SendHousingTool() works",
      "during editing chr is only allowed to walk inside the house",
      "all components which are not invisible get removed from component list during edit and added to design\n(not invisible to give the chance to eg protect a house sign from been removed from the editing char)",
      "any item inside the house will be invisible for the chr",
      "any other mobiles get moved outside the house",
      "param houseelemarray in script call is the current list of houseparts, multi.house_parts gives you the last stored list",
      "until no house.acceptcommit() is called and start of commitscript no new SendHousingTool() for this house is allowed"
    ],
    "return": "1 on success",
    "related": [
      "Character",
      "House"
    ],
    "_name": "SendHousingTool"
    },
  "ApplyConstraint":
  {
    "prototype": "ApplyConstraint( objlist, configfile, propertyname, minvalue )",
    "parameter": [
      {
        "_name": "objlist",
        "_value": "array of objtype numbers"
      },
      {
        "_name": "configfile",
        "_value": "config file reference"
      },
      {
        "_name": "propertyname",
        "_value": "string"
      },
      {
        "_name": "minvalue",
        "_value": "integer"
      }
    ],
    "explain": [
      "Each element's objtype in \"objlist\" is looked up in the config file referenced by \"configfile\".\n        if the object's value for \"propertyname\" is less than \"minvalue\", its objtype is included in the returned array.",
      {
        "code": "//Returns all the objtypes in the \"BowcraftCarving\" entry in menus.cfg:\nvar objtypes := GetMenuObjTypes( \"BowcraftCarving\" );\n//Returns a subset of the objtypes in the bowcraft item crafting config file that require\n//less \"material\" than the value of targetted_logs.amount.\nobjtypes := ApplyConstraint(objtypes,bowcraftconfigfile,\"material\",targetted_logs.amount);\n//the return value is in a convienent form to use AddMenuItem()\nreturn objtypes;",
        "__text": "Notes: Example: gets all the bowcraft items you can make given the amount of logs selected."
      }
    ],
    "return": "An Array of Object Types that pass the constraint.",
    "error": "none (instead returns an Uninitialized Object on failure)",
    "related": [
      "UObject",
      "Array"
    ],
    "_name": "ApplyConstraint"
    },
  "GetCommandHelp":
  {
    "prototype": "GetCommandHelp( character, command )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "command",
        "_value": "string"
      }
    ],
    "explain": [
      "Gets a help message for a textcommand, if one is defined.",
      "Notes: Help files are found in commandname.txt in the same directory as the command script."
    ],
    "return": "String with help information",
    "error": [
      "\"Invalid parameter type\"",
      "\"No help for that command found\""
    ],
    "related": "Character",
    "_name": "GetCommandHelp"
    },
  "GetMenuObjTypes":
  {
    "prototype": "GetMenuObjTypes( menuname )",
    "parameter": {
      "_name": "menuname",
      "_value": "static or dynamic menu"
    },
    "explain": [
      "Gets all the objtypes contained in the menu.",
      "Notes: see CreateMenu(), AddMenuItem()"
    ],
    "return": "Array of objtypes contained in the given menu.",
    "error": "none (instead returns 0 on failure)",
    "related": "Array",
    "_name": "GetMenuObjTypes"
    },
  "SetScriptController":
  {
    "prototype": "SetScriptController( who )",
    "parameter": {
      "_name": "who",
      "_value": "Character Reference"
    },
    "explain": [
      "Set the \"controller\" of the current script to \"who\".",
      "Notes: This is used to know, for instance, who the fire field walk-on script belongs to so that\n        the reputation/criminal system knows who to punish.",
      "pass 0 to clear the script controller."
    ],
    "return": "Character Reference of the \"old\" controller of the script.",
    "error": "none (instead returns 0 on failure)",
    "related": "Character",
    "_name": "SetScriptController"
    },
  
  
  "PlayMovingEffectXYZEx":
  {
    "prototype": "PlayMovingEffectXYZEx( srcx, srcy, srcz, dstx, dsty, dstz, realm := _DEFAULT_REALM, effect, speed, duration := 0, hue := 0, render := 0, fixeddirection := 0, explode := 0, effect3d := 0, effect3dexplode := 0, effect3dsound := 0 )",
    "parameter": [
      {
        "_name": "srcx",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "srcy",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "srcz",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "dstx",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "dsty",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "dstz",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (0..255)"
      },
      {
        "_name": "duration",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "hue",
        "_value": "Integer"
      },
      {
        "_name": "render",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "fixeddirection",
        "_value": "Integer (Optional, 0..1)"
      },
      {
        "_name": "explode",
        "_value": "Integer (Optional, 0..1)"
      },
      {
        "_name": "effect3d",
        "_value": "Integer"
      },
      {
        "_name": "effect3dexplode",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "effect3dsound",
        "_value": "Integer (Optional, 0..255)"
      }
    ],
    "explain": [
      "Causes a moving effect to be played, travelling from source to destination",
      "effect3d,effect3dexplode,effect3dsound are only interpreted by the 3D client",
      "effect3dexplode and effect3dsound are only interpreted if explode is set, effect3d and effect3dexplode values can be found in client/particles dir.",
      "Notes: effect = an item graphic number (the first in a series if an animation) \n       speed = how fast the effect should travel. \n       explode = 0/1 show an explosion at destination at the end of the effect?\n       hue = which color should the effect have?\n       fixeddirection = 0/1 should the effect change his facing?",
      "render values are:",
      "0 no change",
      "1 It becomes dark",
      "2 It becomes bright",
      "3 Bright color is emphasized and dark color is converted transparently",
      "4 The translucency (transparency is high)",
      "5 The translucency (it is close to primary color)",
      "6 Negative positive reversal",
      "7 The background which is transparent negative positive reversal"
    ],
    "return": "1 on success",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for realm\"",
      "\"Realm not found\""
    ],
    "related": "UObject",
    "_name": "PlayMovingEffectXYZEx"
    },
  "PlayObjectCenteredEffectEx":
  {
    "prototype": "PlayObjectCenteredEffectEx( center, effect, speed, duration := 0, hue := 0, render := 0, layer := 0, effect3d := 0 )",
    "parameter": [
      {
        "_name": "center",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (0..255)"
      },
      {
        "_name": "duration",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "hue",
        "_value": "Integer"
      },
      {
        "_name": "render",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "layer",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "effect3d",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Causes an effect to be played, centered on uobject, which follows uobject if it moves.",
      "layer, effect3d are only interpreted by the 3D client",
      "effect3d values can be found in client/particles dir.",
      "Notes: effect = an item graphic number (the first in a series if an animation) \n       speed = how fast the effect should travel.\n       duration = controls the number of total frames to play in the animation (loops if greater than the length of the animation). 0 = play once. \n       hue = which color should the effect have?",
      "render values are:",
      "0 no change",
      "1 It becomes dark",
      "2 It becomes bright",
      "3 Bright color is emphasized and dark color is converted transparently",
      "4 The translucency (transparency is high)",
      "5 The translucency (it is close to primary color)",
      "6 Negative positive reversal",
      "7 The background which is transparent negative positive reversal",
      "layer values are:",
      "0 Head",
      "1 RightHand",
      "2 LeftHand",
      "3 Waist",
      "4 LeftFoot",
      "5 RightFoot",
      "7 CenterFeet"
    ],
    "return": "1 on success",
    "error": "none (returns 0 on invalid parameter)",
    "related": "UObject",
    "_name": "PlayObjectCenteredEffectEx"
    },
  "PlayStationaryEffectEx":
  {
    "prototype": "PlayStationaryEffectEx( x, y, z, realm := _DEFAULT_REALM, effect, speed, duration := 0, hue := 0, render := 0, effect3d := 0 )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (to 255)"
      },
      {
        "_name": "duration",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "hue",
        "_value": "Integer"
      },
      {
        "_name": "render",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "effect3d",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Starts a stationary graphic effect at x,y,z.",
      "effect3d is only interpreted by the 3D client",
      "effect3d values can be found in client/particles dir.",
      "Notes: effect= is a UO graphic number (the first graphic in a series for an animated effect)\n       speed = controls the time between frames of animation\n       duration = controls the number of total frames to play in the animation (loops if greater than the length of the animation). 0 = play once.",
      "render values are:",
      "0 no change",
      "1 It becomes dark",
      "2 It becomes bright",
      "3 Bright color is emphasized and dark color is converted transparently",
      "4 The translucency (transparency is high)",
      "5 The translucency (it is close to primary color)",
      "6 Negative positive reversal",
      "7 The background which is transparent negative positive reversal",
      "layer values are:",
      "0 Head",
      "1 RightHand",
      "2 LeftHand",
      "3 Waist",
      "4 LeftFoot",
      "5 RightFoot",
      "7 CenterFeet"
    ],
    "return": "1 on success",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for realm\""
    ],
    "related": "UObject",
    "_name": "PlayStationaryEffectEx"
    },
  "CheckLosBetween":
  {
    "prototype": "CheckLosBetween( x1, y1, z1, x2, y2, z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "Integer world coordinates for coordinate 1"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates for coordinate 1"
      },
      {
        "_name": "z1",
        "_value": "Integer world coordinates for coordinate 1"
      },
      {
        "_name": "x2",
        "_value": "Integer world coordinates for coordinate 2"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates for coordinate 2"
      },
      {
        "_name": "z2",
        "_value": "Integer world coordinates for coordinate 2"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": "Tests if coordinate 1 has Line-of-sight to coordinate 2",
    "return": [
      "1 if coordinate 1 has line-of-sight to coordinate 2",
      "0 if coordinate 1 does not have line-of-sight to coordinate 2"
    ],
    "error": [
      "(returns 0 on invalid parameter)",
      "\"Invalid Coordinates for realm\"",
      "\"Realm not found\""
    ],
    "related": "Character",
    "_name": "CheckLosBetween"
    },
  "CloseGump":
  {
    "prototype": "CloseGump( character, gumpid, response := 0 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character"
      },
      {
        "_name": "gumpid",
        "_value": "Integer"
      },
      {
        "_name": "response",
        "_value": "UObject - what is going to be returned to the gump script"
      }
    ],
    "explain": [
      "If the gump was sent using a custom gumpid, then the same gumpid must be used here.\nIf the gump was sent without specifying a gumpid, then use the sender script's pid.",
      "Closes the gump, returning 'response' to the script that called SendDialogGump()"
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid Parameters\"",
      "\"No client attached\"",
      "\"Couldnt find script\""
    ],
    "related": [
      "Character",
      "UObject",
      "Script"
    ],
    "_name": "CloseGump"
    },
  "PlayMusic":
  {
    "prototype": "PlayMusic( chr, music_id := 0 )",
    "parameter": [
      {
        "_name": "chr",
        "_value": "Character"
      },
      {
        "_name": "music_id",
        "_value": "Integer - ID of the music to be played on client"
      }
    ],
    "explain": "Plays music on client, as if it had just entered a new region",
    "return": "1 on success",
    "error": "\"Invalid Parameters\"",
    "related": "Character",
    "_name": "PlayMusic"
    },
  "CanWalk":
  {
    "prototype": "CanWalk(movemode, x1, y1, z1, x2_or_dir, y2 := CANWALK_DIR, realm := _DEFAULT_REALM)",
    "parameter": [
      {
        "_name": "movemode",
        "_value": "String"
      },
      {
        "_name": "x1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "x2_or_dir",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Checks if a mobile can walk with given movemode into given direction and returns the new z value or error.",
      "Note: if y2 is CANWALK_DIR x2 is considered as direction. if x2 and y2 is given it calculates the needed direction",
      {
        "code": "const CANWALK_DIR := -1;",
        "__text": "uo.em constants:"
      }
    ],
    "return": "new z value on success",
    "error": [
      "\"Invalid Parameters\"",
      "\"Realm not found.\"",
      "\"Invalid coordinates for realm.\"",
      "\"Cannot walk there\""
    ],
    "related": "Character",
    "_name": "CanWalk"
    },
  "CloseWindow":
  {
    "prototype": "CloseWindow( character, type, object )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character"
      },
      {
        "_name": "type",
        "_value": "Integer"
      },
      {
        "_name": "object",
        "_value": "UObject Reference"
      }
    ],
    "explain": [
      "if ( type == CLOSE_CONTAINER ) object has to be a ContainerRef, to close the open container gump.\n            else object has to be a MobRef to close paperdoll, status or profile of the chosen mob.",
      {
        "code": "const CLOSE_PAPERDOLL := 1;\nconst CLOSE_STATUS    := 2;\nconst CLOSE_PROFILE   := 8;\nconst CLOSE_CONTAINER := 12;",
        "__text": "uo.em constants for type:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid Parameters\"",
      "\"No client attached\"",
      "\"Invalid object, has to be a containerRef\"",
      "\"Invalid object, has to be a mobRef\"",
      "\"Invalid type\""
    ],
    "related": "Character",
    "_name": "CloseWindow"
    },
  "SendCharProfile":
  {
    "prototype": "SendCharProfile( character, of_who, title, uneditable_text := CHARPROFILE_NO_UNEDITABLE_TEXT, editable_text := CHARPROFILE_NO_EDITABLE_TEXT )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character"
      },
      {
        "_name": "of_who",
        "_value": "Character"
      },
      {
        "_name": "title",
        "_value": "String"
      },
      {
        "_name": "uneditable_text",
        "_value": "unicode arrays"
      },
      {
        "_name": "editable_text",
        "_value": "unicode arrays"
      }
    ],
    "explain": [
      "will send the serverside charprofile packet back to client and display it for the player.",
      {
        "code": "const CHARPROFILE_NO_UNEDITABLE_TEXT := array;\nconst CHARPROFILE_NO_EDITABLE_TEXT := array;",
        "__text": "uo.em constants for type:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid Parameters\"",
      "\"Mobile must be online.\"",
      "\"Invalid parameter type\""
    ],
    "related": "Character",
    "_name": "SendCharProfile"
  },
  "SendOverallSeason":
  {
    "prototype": "SendOverallSeason( season_id, playsound := 1 )",
    "parameter": [
      {
        "_name": "season_id",
        "_value": "Integer"
      },
      {
        "_name": "playsound",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Used to send the Season packet 0xBC to all clients logged on.",
      "This function doesnt resend the lightlevel or weather after it sends season, that has to be done by scripts."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid Parameters\"",
      "\"Invalid season id\""
    ],
    "related": "Character",
    "relatedcfg": "weather.cfg",
    "_name": "SendOverallSeason"
  },
  "DistanceEuclidean":
  {
    "prototype": "DistanceEuclidean( obj1, obj2 )",
    "parameter": [
      {
        "_name": "obj1",
        "_value": "UObject Reference"
      },
      {
        "_name": "obj2",
        "_value": "UObject Reference"
      }
    ],
    "explain": [
      "Determines the distance between two objects.  If either object is in a container, \n        uses the world-position of its ultimate-parent container.",
      "Notes: This distance is defined as sqrt(pow(object1.x-object2.x,2)+pow(object1.y-object2.y,2))"
    ],
    "return": "Double - calculated distance on success",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "DistanceEuclidean"
  },
  "CoordinateDistanceEuclidean":
  {
    "prototype": "CoordinateDistanceEuclidean(x1, y1, x2, y2)",
    "parameter": [
      {
        "_name": "x1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "x2",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates"
      }
    ],
    "explain": [
      "Calculates the distance between two coordinates.",
      "Notes: This distance is defined as sqrt(pow(x1-x2,2)+pow(y1-y2,2))"
    ],
    "return": "Double - calculated distance on success",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "CoordinateDistanceEuclidean"
  },
  "SendPopUpMenu":
  {
    "prototype": "SendPopUpMenu( to_whom, above, menu )",
    "parameter": [
      {
        "_name": "to_whom",
        "_value": "Character: who to send the menu to"
      },
      {
        "_name": "above",
        "_value": "Object: Item or Mobile to display the menu above"
      },
      {
        "_name": "menu",
        "_value": "Array: array of menu elements"
      }
    ],
    "explain": [
      "Will show a pop-up context menu above the given object, waits for a reponse and return it \n           (if no response is given, this could hang the script undefinitely)",
      "Every element in the menu array must be an integer specifying a cliloc text for the menu or a\n           struct { cliloc, [disabled,] [arrow,] [color] }",
      "- cliloc: int, this is the only mandatory element in struct, the cliloc text id (min 3000000, max 3065535)",
      "- disabled: bool, if true, the menu entry will be disabled and shown in gray (default: false)",
      "- arrow: bool, if true, an arrow will be shown (default: false)",
      "- color: an optional rgb 1555 color (ex, 0 = transparent, 0x8000 = solid black, 0x1F = blue, 0x3E0 = green, 0x7C00 = red)"
    ],
    "return": "Error or Array index selected (0 if canceled). No validation is done.",
    "error": [
      "\"Invalid parameter\"",
      "\"No client attached\"",
      "\"Can't send empty menu\"",
      "\"Too many entries in menu\"",
      "\"Menu elements must be int or struct\"",
      "\"Cliloc out of range in menu\"",
      "\"Missing cliloc for menu element\"",
      "\"Invalid cliloc for menu element\""
    ],
    "related": [
      "Character",
      "Item",
      "Mobile",
      "Array",
      "Struct"
    ],
    "_name": "SendPopUpMenu"
  },
  {
    "prototype": "SingleClick( who, what )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "what",
        "_value": "Character or Item reference"
      }
    ],
    "explain": [
      "Emulates a single click of the character \"who\" on the object or character \"what\".",
      "Note: \"what\" can be a serial."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Mobile has no active client\""
    ],
    "_name": "SingleClick"
    },
  
  {
    "prototype": "GetSpellDifficulty( spellid )",
    "parameter": {
      "_name": "spellid",
      "_value": "Integer"
    },
    "explain": [
      "Gets spell \"difficulty\" based on spell circle number (config/circles.cfg).",
      "Notes: spells.cfg files define spells and spell ids.\n       \"Difficulty\" values are used in the function CheckSkill()"
    ],
    "return": "Integer difficulty value",
    "error": [
      "\"Invalid parameter\"",
      "\"No such spell\"",
      "\"Spell ID out of range\""
    ],
    "relatedcfg": "circles.cfg",
    "_name": "GetSpellDifficulty"
    },
  
  {
    "prototype": "SpeakPowerWords( who, spellid, font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "spellid",
        "_value": "Integer"
      },
      {
        "_name": "font",
        "_value": "Integer (optional)"
      },
      {
        "_name": "color",
        "_value": " Integer (optional)"
      }
    ],
    "explain": [
      "Forces character \"who\" to speak the spell power words as defined in spells.cfg.",
      "Notes: spells.cfg files define spells and spell ids.",
      "See client.inc for font and color values."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"No such spell\"",
      "\"Spell ID out of range\""
    ],
    "related": "Character",
    "relatedcfg": "spells.cfg",
    "_name": "SpeakPowerWords"
    },
  
  {
    "prototype": "StartSpellEffect( who, spellid )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "spellid",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Starts the spell script as defined in spells.cfg",
      "Notes: spells.cfg files define spells and spell ids."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"No such spell\"",
      "\"Spell ID out of range\""
    ],
    "related": "Character",
    "relatedcfg": "spells.cfg",
    "_name": "StartSpellEffect"
    },
  
  {
    "prototype": "DisconnectClient( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": [
      "Disconnects the character's client.",
      "Notes: Fun!"
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"No client is attached\""
    ],
    "related": "Character",
    "_name": "DisconnectClient"
    },
  
  {
    "prototype": "ListEquippedItems( who )",
    "parameter": {
      "_name": "who",
      "_value": "Character Reference"
    },
    "explain": "Returns a list of items current equipped on character referenced by \"who\"",
    "return": "Array of Item References equipped on \"who\"",
    "error": "\"Invalid parameter\"",
    "related": [
      "Character",
      "Item",
      "Array"
    ],
    "_name": "ListEquippedItems"
    },
  
  {
    "prototype": "ListHostiles( character, range := 20, flags := 0 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "range",
        "_value": "integer (optional, default=20)"
      },
      {
        "_name": "flags",
        "_value": "integer (optional, default=0)"
      }
    ],
    "explain": [
      "Gets a list of Character References that are hostile (i.e. attacking) \"character\"",
      {
        "code": "const LH_FLAG_LOS               := 1;       // only include those in LOS\nconst LH_FLAG_INCLUDE_HIDDEN    := 2;       // include hidden characters",
        "__text": "Notes: from uo.em constants:"
      },
      "Will NOT find \"concealed\" characters."
    ],
    "return": "Array of Character References hostile to \"character\"",
    "error": "\"Invalid parameter\"",
    "related": [
      "Character",
      "Array"
    ],
    "_name": "ListHostiles"
    },
  
  {
    "prototype": "OpenPaperdoll( towhom, forwhom )",
    "parameter": [
      {
        "_name": "towhom",
        "_value": "Character Reference"
      },
      {
        "_name": "forwhom",
        "_value": "Character Reference"
      }
    ],
    "explain": [
      "Sends the paperdoll gump to a character.",
      "Notes: \"towhom\" gets the paperdoll for character \"forwhom\""
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\""
    ],
    "related": "Character",
    "_name": "OpenPaperdoll"
    },
  
  {
    "prototype": "SelectColor( character, item )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "item",
        "_value": "Item Reference"
      }
    ],
    "explain": [
      "Sends a color chooser gump to character.",
      "Notes: Function blocks until character cancels or selects a color from the chooser gump.\n       No validation is done by the core. Might be useful to check if the color returned is\n       >1001 (out of range for the chooser gump)."
    ],
    "return": "Integer of selected color. use item.color = return_value to set.",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"Client is already selecting a color\""
    ],
    "related": [
      "Character",
      "Item"
    ],
    "_name": "SelectColor"
    },
  
  {
    "prototype": "SendBuyWindow( character, container, vendor, items, flags := 0 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference to player"
      },
      {
        "_name": "container",
        "_value": "Container Reference ( vendor 'for sale items' container )"
      },
      {
        "_name": "vendor",
        "_value": "Character Reference to NPC vendor"
      },
      {
        "_name": "items",
        "_value": "Container Reference (vendor 'player bought items' container)"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Sends the \"buy scroll\" gump to a player to choose items to buy.",
      "Notes: Pretty nasty function. Containers should be in storage areas.",
      "Notes: Core will send Item Description using AoS Tooltips in any case if flag VENDOR_SEND_AOS_TOOLTIP is set. This will correct problems with Item Descriptions in newer Clients, but maybe freeze ancient Clients...",
      {
        "code": "const VENDOR_SEND_AOS_TOOLTIP   := 0x01;",
        "__text": "Notes: uo.em constants for this function:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"A parameter was invalid\"",
      "\"No client connected to character\"",
      "\"Parameter 1 invalid\"",
      "\"Parameter 2 invalid\"",
      "\"Parameter 3 invalid\"",
      "\"Too much crap in vendor's inventory!\" (message exceeds 2000 byte buffer)"
    ],
    "related": [
      "Character",
      "Container"
    ],
    "_name": "SendBuyWindow"
    },
  
  {
    "prototype": "SendDialogGump( who, layout, textlines, x := 0, y := 0, flags := 0, gumpid := 0 )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "layout",
        "_value": "String Array"
      },
      {
        "_name": "textlines",
        "_value": "String Array"
      },
      {
        "_name": "x",
        "_value": "Integer-Offset"
      },
      {
        "_name": "y",
        "_value": "Integer-Offset"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      },
      {
        "_name": "gumpid",
        "_value": "Integer, 0 to 0xFFFFFF"
      }
    ],
    "explain": [
      "Sends a generic gump window to \"who\" and waits for the user's input.",
      "If no gumpid is given, the script's pid will be sent as gumpid.",
      "Notes: \"layout\" is an array of strings with each string a gump layout directive.\n       \"textlines\" is an array of strings with text that is displayed on the gump. \"Layout\" references\n          this array in a 0-based manner.\n       Creating these arrays is difficult and hard to debug. See the \"gumps\" package for a more user-\n       friendly interface to gumps.",
      "Based on clientversion core will send compressed or uncompressed version",
      {
        "code": "const SENDDIALOGMENU_FORCE_OLD  := 0x01;",
        "__text": "Notes: uo.em constants for this function:"
      }
    ],
    "return": "the return value is a dictionary.\n       return[0] contains the button ID the user used to close the gump. 0 is returned if the gump was cancelled.\n       return.keys contains the IDs for the radio buttons, checkboxes, and textentries set when the gump was returned. Note control characters are stripped from the text input lines.",
    "error": [
      "\"Invalid parameter\"",
      "\"No client attached\"",
      "\"Buffer length exceeded\" (64K byte)",
      "\"GumpID out of range\""
    ],
    "related": [
      "Character",
      "Dictionary",
      "Array"
    ],
    "_name": "SendDialogGump"
    },
  
  {
    "prototype": "SendInstaResDialog( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": [
      "Character's screen fades to black, \"You are Dead\" appears, Character gets menu choice for \nInstares.",
      "Notes: (Rac) Could not get menu dialog to appear, \"Play as ghost\" returned to server no matter what.\n      \"AssumePlayAsGhost\" in uo.cfg made no difference."
    ],
    "return": "Integer with choice. 1 = instares, 2 = ghost",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"Client busy with another instares dialog\""
    ],
    "related": "Character",
    "_name": "SendInstaResDialog"
    },
  
  {
    "prototype": "SendOpenBook( character, book )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "book",
        "_value": "Item Reference (Book object only)"
      }
    ],
    "explain": [
      "Sends a book gump to the character.",
      {
        "code": "exported function IsWritable(book)    // returns 0 or 1 for readonly/writable\nexported function GetNumLines(book)   // returns maximum number of lines\nexported function GetTitle(book)      // returns title as string\nexported function GetAuthor(book)     //returns author as string\nexported function GetLine(book, line) // line is 1-based",
        "__text": "The 'book' passed must have a Method Script, exporting the following functions:"
      },
      {
        "code": "exported function SetAuthor(book,author)\nexported function SetTitle(book,title)\nexported function SetLine(book,line,text)\nexported function GetContents(book)   // returns an array of all lines",
        "__text": "Writable books must provide the following functions:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No active client\"",
      "\"book.GetNumLines() did not return an Integer\"",
      "\"book.GetContents() must return an array\"",
      "\"Buffer overflow\""
    ],
    "related": [
      "Character",
      "Item",
      "Array"
    ],
    "_name": "SendOpenBook"
    },
  
  {
    "prototype": "SendOpenSpecialContainer( character, container )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "container",
        "_value": "Container Reference"
      }
    ],
    "explain": [
      "Sends an open container gump to the character.",
      "Notes: DANGEROUS FUNCTION. Normally only used to show \"inaccessable\" containers like bankboxes.\n       If used on normal containers, it allows the character to both view and change the contents.\n       See SendViewContainer()."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"That isn't a container\""
    ],
    "related": [
      "Character",
      "Container"
    ],
    "_name": "SendOpenSpecialContainer"
    },
  
  {
    "prototype": "SendPacket( to_whom, packet_hex_string )",
    "parameter": [
      {
        "_name": "to_whom",
        "_value": "Character Reference"
      },
      {
        "_name": "packet_hex_string",
        "_value": "String"
      }
    ],
    "explain": [
      "Sends the hex string to the character as a binary packet.",
      "Notes: Development function, use at your own risk. The string is in a form like:\n      SendPacket(who,\"BC0401\") would cause the season to change to \"desolation\""
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"Invalid packet string length.\""
    ],
    "related": "Character",
    "_name": "SendPacket"
    },
  
  {
    "prototype": "SendSellWindow( character, vendor, i1, i2, i3, flags := 0 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "vendor",
        "_value": "Character Reference"
      },
      {
        "_name": "i1",
        "_value": "Container Reference"
      },
      {
        "_name": "i2",
        "_value": "Container Reference"
      },
      {
        "_name": "i3",
        "_value": "Container Reference"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Sends a sell scroll gump to \"character\" using \"vendor\" as the merchant.",
      "Notes: i1 = vendor's \"For sale\" item containter. i2 = vendor's \"Bought from player\" item container. i3 = vendor's \"Buyable\" item container.",
      "Notes: Core will send Item Description using AoS Tooltips in any case if flag VENDOR_SEND_AOS_TOOLTIP is set. This will correct problems with Item Descriptions in newer Clients, but maybe freeze ancient Clients...",
      {
        "code": "const VENDOR_SEND_AOS_TOOLTIP   := 0x01;",
        "__text": "Notes: uo.em constants for this function:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"A parameter was invalid\"",
      "\"No client connected to character\"",
      "\"Parameter 1 invalid\" if !(vendor.isa(POLCLASS_NPC))",
      "\"Parameter 2 must be a container\"",
      "\"Character has no backpack\""
    ],
    "related": [
      "Character",
      "Container"
    ],
    "_name": "SendSellWindow"
    },
  
  {
    "prototype": "SendSkillWindow( towhom, forwhom )",
    "parameter": [
      {
        "_name": "towhom",
        "_value": "Character Reference"
      },
      {
        "_name": "forwhom",
        "_value": "Character Reference"
      }
    ],
    "explain": [
      "Sends a skills scroll gump to \"towhom\"",
      "Notes: The skills belong to \"forwhom\" and are sent to \"towhom\""
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\""
    ],
    "related": "Character",
    "_name": "SendSkillWindow"
    },
  
  {
    "prototype": "SendStringAsTipWindow( character, text )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "text",
        "_value": "String"
      }
    ],
    "explain": [
      "Sends \"text\" to \"character\" in a tip-window gump.",
      "Text needs to be in \"MAC\" format: CR at the end of each line."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\""
    ],
    "related": "Character",
    "_name": "SendStringAsTipWindow"
    },
  
  {
    "prototype": "SendTextEntryGump( who, line1, cancel := TE_CANCEL_ENABLE, style := TE_STYLE_NORMAL, maximum := 40, \nline2 := \"\" )",
    "parameter": [
      {
        "_name": "who",
        "_value": "Character Reference"
      },
      {
        "_name": "line1",
        "_value": "String"
      },
      {
        "_name": "cancel",
        "_value": "Integer (TE_CANCEL_DISABLE or TE_CANCEL_ENABLE)"
      },
      {
        "_name": "style",
        "_value": "Integer (TE_STYLE_DISABLE or TE_STYLE_NORMAL or TE_STYLE_NUMERICAL)"
      },
      {
        "_name": "maximum",
        "_value": "Integer"
      },
      {
        "_name": "line2",
        "_value": "String"
      }
    ],
    "explain": [
      "Sends a text-entry gump to \"who\" with the specified option, style, and informational \nstring.",
      {
        "code": "const TE_CANCEL_DISABLE := 0;\nconst TE_CANCEL_ENABLE  := 1;\n\nconst TE_STYLE_DISABLE  := 0;\nconst TE_STYLE_NORMAL   := 1;\nconst TE_STYLE_NUMERICAL:= 2;",
        "__text": "Notes: uo.em constants for this function:"
      }
    ],
    "return": "A String on success\n       0 if gump was cancelled.",
    "error": [
      "\"Invalid parameter\"",
      "\"No client attached\""
    ],
    "related": "Character",
    "_name": "SendTextEntryGump"
    },
  
  {
    "prototype": "SendViewContainer( character, container )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "container",
        "_value": "Container Reference"
      }
    ],
    "explain": [
      "Sends the container's open gump and contents to the character.",
      "Notes: Use this for normal containers."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"That isn't a container\""
    ],
    "related": [
      "Character",
      "Container"
    ],
    "_name": "SendViewContainer"
    },
  
  {
    "prototype": "PlayMovingEffectXYZ( srcx, srcy, srcz, dstx, dsty, dstz, effect, speed, loop := 0, explode := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "srcx",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "srcy",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "srcz",
        "_value": "Integer Source world coordinates"
      },
      {
        "_name": "dstx",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "dsty",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "dstz",
        "_value": "Integer Destination world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "effect",
        "_value": "integer"
      },
      {
        "_name": "speed",
        "_value": "integer (to 255)"
      },
      {
        "_name": "loop",
        "_value": "integer (to 255)"
      },
      {
        "_name": "explode",
        "_value": "integer (to 255)"
      }
    ],
    "explain": [
      "Starts a moving effect between the source and destination coordinates.",
      "Notes: \"effect\" is a UO graphic number (the first graphic in a series for an animated effect)\n       \"speed\" controls the time between frames of animation\n       \"loop\" controls the number of total frames to play in the animation (loops if greater than the length of the animation). 0 = play once.\n       \"explode\" flags if an explosion effect should be played at the end of the animation"
    ],
    "return": "1 on success, 0 or Error",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "_name": "PlayMovingEffectXYZ"
    },
  
  {
    "prototype": "PlaySoundEffectPrivate( object, effect, playfor )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "playfor",
        "_value": "Character Reference"
      }
    ],
    "explain": [
      "Plays a sound effect only heard by \"playfor\", centered around \"object\"",
      "Notes: see client.inc for sound IDs (or InsideUO)"
    ],
    "return": "1 on success",
    "error": "\"Invalid parameter\"",
    "related": [
      "Character",
      "UObject"
    ],
    "_name": "PlaySoundEffectPrivate"
    },
  
  {
    "prototype": "PlayStationaryEffect( x, y, z, effect, speed, loop := 0, explode := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "effect",
        "_value": "integer"
      },
      {
        "_name": "speed",
        "_value": "integer (to 255)"
      },
      {
        "_name": "loop",
        "_value": "integer (to 255)"
      },
      {
        "_name": "explode",
        "_value": "integer (to 255)"
      }
    ],
    "explain": [
      "Starts a stationary graphic effect at x,y,z.",
      "Notes: \"effect\" is a UO graphic number (the first graphic in a series for an animated effect)\n       \"speed\" controls the time between frames of animation\n       \"loop\" controls the number of total frames to play in the animation (loops if greater than the length of the animation). 0 = play once.\n       \"explode\" flags if an explosion effect should be played at the end of the animation"
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "_name": "PlayStationaryEffect"
    },
  
  {
    "prototype": "POLCore()",
    "explain": "Returns a Polcore object. See object reference for object methods.",
    "return": "Polcore object reference",
    "related": "Polcore",
    "_name": "POLCore"
    },
  
  {
    "prototype": "GetMapInfo( x, y, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Gets information about map data at a location.",
      "Notes: Tells you nothing about Static items! \n       z = map height at x,y. Not necessarily the same as GetStandingHeight()\n       landtile = the land tile type number at x,y (not an item graphic number)"
    ],
    "return": "A Struct with members \"z\" and \"landtile\".",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "_name": "GetMapInfo"
    },
  
  {
    "prototype": "GetStandingHeight( x, y, startz, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "startz",
        "_value": "Integer"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Gets the lowest z height value one could stand at x,y starting at \"startz\".",
      "Notes: For example, if there is a static tunnel under the map, using a startz value less than the\n        tunnel floor would get you the z of the floor. Above that value would get you the \n        next possible standing height (i.e. on the map above).\n       Also returns a multi reference if a multi exists at that location."
    ],
    "return": "A Struct with members \"z\" and possibly \"multi\" (a Multi Reference)",
    "error": [
      "\"Invalid parameter type\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"Can't stand there\" if inaccessible location"
    ],
    "_name": "GetStandingHeight"
    },
  
  {
    "prototype": "GetWorldHeight( x, y, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": "Gets the lowest standing height at x,y",
    "return": "z value of lowest standing height",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"Location out of bounds\"",
      "\"Nowhere\" if one could not stand at any z value of x,y"
    ],
    "_name": "GetWorldHeight"
    },
  
  {
    "prototype": "Shutdown()",
    "explain": [
      "Shuts down the server",
      "Notes: Disconnects all clients and saves the world state."
    ],
    "return": "1 always",
    "_name": "Shutdown"
    },
  
  {
    "prototype": "Accessible( by_character, item, range := ACCESSIBLE_DEFAULT )",
    "parameter": [
      {
        "_name": "by_character",
        "_value": "Character Reference"
      },
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "range",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Function: Determines if an item falls into one of the following categories for a character:",
      "An item on the ground, within \"range\" squares (defaults to \"DefaultAccessibleRange\" from servspecopt). Use ACCESSIBLE_IGNOREDISTANCE to avoid this check.",
      "An item equipped by the character",
      "An item inside the character's backpack",
      "A temporarily accessible item",
      "Notes: Does not check that character has line-of-sight to item."
    ],
    "return": "0 if item does not fall into one of the above categories, 1 if the item does.",
    "error": "none",
    "related": [
      "Item",
      "Character"
    ],
    "_name": "Accessible"
    },
  
  {
    "prototype": "Broadcast( text, font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR, requiredCmdLevel := _DEFAULT_TEXT_REQUIREDCMD )",
    "parameter": [
      {
        "_name": "text",
        "_value": "String"
      },
      {
        "_name": "font",
        "_value": "Integer (optional)"
      },
      {
        "_name": "color",
        "_value": " Integer (optional)"
      },
      {
        "_name": "requiredcmdlevel",
        "_value": " Integer (optional)"
      }
    ],
    "explain": [
      "Sends text as a System Message to every online player whos cmd level is above requiredcmdlevel.",
      "See client.inc for font and color values."
    ],
    "return": "1 on success",
    "error": "none (returns 0 on invalid parameter)",
    "_name": "Broadcast"
    },
  
  {
    "prototype": "CheckLineOfSight( object1, object2 )",
    "parameter": [
      {
        "_name": "object1",
        "_value": "UObject Reference"
      },
      {
        "_name": "object2",
        "_value": "UObject Reference"
      }
    ],
    "explain": "Tests if object1 has Line-of-sight to object 2",
    "return": [
      "0 if sight blocked",
      "1 if object1 has LOS to object2"
    ],
    "error": "none (returns 0 on invalid parameter)",
    "related": "UObject",
    "_name": "CheckLineOfSight"
    },
  
  {
    "prototype": "CancelTarget( of_whom )",
    "parameter": {
      "_name": "of_whom",
      "_value": "Character Reference"
    },
    "explain": "If the character has a current Target Reference, it sends the cancel packet. Client response to the original target cursor's script is as if they hit Escape.",
    "return": "0",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client connected\"",
      "\"Client does not have an active target cursor\""
    ],
    "related": "Character",
    "_name": "CancelTarget"
    },
  
  {
    "prototype": "CheckLosAt( character, x, y, z )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      }
    ],
    "explain": "Tests if character has Line-of-sight to coordinate",
    "return": [
      "1 if character has line-of-sight to (x,y,z)",
      "0 if character does not have line-of-sight to (x,y,z)"
    ],
    "error": [
      "(returns 0 on invalid parameter)",
      "\"Invalid Coordinates for realm\""
    ],
    "related": "Character",
    "_name": "CheckLosAt"
    },
  
  {
    "prototype": "CloseTradeWindow( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": "Attempts to close the Trade Window a client has open.",
    "return": "1",
    "error": [
      "\"Invalid parameter type\"",
      "\"Mobile is not currently trading with anyone.\""
    ],
    "related": "Character",
    "_name": "CloseTradeWindow"
    },
  
  {
    "prototype": "CreateItemAtLocation( x, y, z, objtype, amount := 1, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype, OR String ObjtypeName, OR GetItemDescriptor struct."
      },
      {
        "_name": "amount",
        "_value": "Integer (0..60000)"
      }
    ],
    "explain": [
      "Creates an item at an arbitrary location.",
      "Amount specifies how large the stack should be.",
      "Runs the item's create script, if any."
    ],
    "return": "Item Reference on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"That item is not stackable.  Create one at a time.\"",
      "\"Unable to create item of objtype X\""
    ],
    "related": "Item",
    "relatedcfg": "itemdesc.cfg",
    "_name": "CreateItemAtLocation"
    },
  
  {
    "prototype": "CreateItemInBackpack( of_character, objtype, amount := 1 )",
    "parameter": [
      {
        "_name": "of_character",
        "_value": "Character Reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype, OR String ObjtypeName, OR GetItemDescriptor struct."
      },
      {
        "_name": "amount",
        "_value": "Integer (optional, 0..60000)"
      }
    ],
    "explain": [
      "Creates an item in a character's backpack.",
      "Notes: Adds to an existing stack in the top level of the container, if an appropriate stack can be found (meaning, can hold the new amount, the existing item stack has color equal to its itemdesc.cfg color property AND has equal CProps as its itemdesc.cfg entry (not counting locally and globally ignored cprops).  If no appropritate stack is found, creates a new stack.",
      "Runs the item's create script, if any.",
      "Calls the container's canInsert and onInsert scripts, if any."
    ],
    "return": "Item Reference on success",
    "error": [
      "\"A parameter was invalid.\"",
      "\"Character has no backpack.\"",
      "\"That item is not stackable.  Create one at a time.\"",
      "\"That container is full\"",
      "\"Failed to create that item type\""
    ],
    "related": [
      "Character",
      "Item"
    ],
    "relatedcfg": [
      "itemdesc.cfg",
      "stacking.cfg"
    ],
    "_name": "CreateItemInBackpack"
    },
  
  {
    "prototype": "CreateItemInContainer( container, objtype, amount := 1 )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container Reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype, OR String ObjtypeName, OR GetItemDescriptor struct."
      },
      {
        "_name": "amount",
        "_value": "Integer (optional, 0..60000)"
      }
    ],
    "explain": [
      "Creates an item in a container.",
      "Notes: Adds to an existing stack in the top level of the container, if an appropriate stack can be found (meaning, can hold the new amount, the existing item stack has color equal to its itemdesc.cfg color property AND has equal CProps as its itemdesc.cfg entry (not counting locally and globally ignored cprops).  If no appropritate stack is found, creates a new stack.",
      "Runs the item's create script, if any.",
      "Calls the container's canInsert and onInsert scripts, if any."
    ],
    "return": "Item Reference on success",
    "error": [
      "\"A parameter was invalid\"",
      "\"That is not a container\"",
      "\"That item is not stackable.  Create one at a time.\"",
      "\"That container is full\"",
      "\"Failed to create that item type\""
    ],
    "related": [
      "Item",
      "Container"
    ],
    "relatedcfg": [
      "itemdesc.cfg",
      "stacking.cfg"
    ],
    "_name": "CreateItemInContainer"
    },
  
  {
    "prototype": "CreateNpcFromTemplate( template, x, y, z, override_properties := 0, realm := _DEFAULT_REALM)",
    "parameter": [
      {
        "_name": "template",
        "_value": "String"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "override_properties",
        "_value": "A Struct with keys as String members and values as appropriate (see notes)"
      }
    ],
    "explain": [
      "Creates an NPC from a template (found in NPCDESC.CFG).",
      "Notes: override_properties: a structure containing members to override values in the \n        NPC template. This can be used to override built-in properties (facing, \n        color, gender etc) and custom properties (\"CProps\" = dictionary {key=cpropname value=cpropvalue})"
    ],
    "return": "Character Reference on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"Parameter 4 must be a Struct or Integer(0)\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"NPC template 'X' not found\"",
      "\"Not a valid location for an NPC!\"",
      "\"Exception detected trying to create npc from template 'X'\""
    ],
    "related": "NPC",
    "relatedcfg": "npcdesc.cfg",
    "_name": "CreateNpcFromTemplate"
    },
  
  {
    "prototype": "Detach()",
    "explain": [
      "Disassociates the current script from the character that it is attached to. See Attach() too.",
      "If the current script is not attached to a character, does nothing.",
      {
        "code": "Program Spell(who)\n    // Test, if spell possible (reagents, mana, line of sight, etc..)\n    // Do the spell, animations, etc.\n    // Now something is changed, a temporary effect is installed to an\nobject, this effect will expire in n seconds\n    // Detach the script from the caster\n    Detach(); //this allows other scripts to run on this character during the below sleep()\n    sleep(n); //delay until effect time is elapsed\n    // End the effect, and return\nendprogram",
        "__text": "Example: a spell script for both  doing the spell, implementing a temporary spell effect on\nan object, and removing the effect after an amount of time:"
      }
    ],
    "return": "1 on success (the script was attached to a character, and is no longer.)",
    "error": "none (returns 0 on failure (character invalid))",
    "related": "Character",
    "_name": "Detach"
    },
  
  {
    "prototype": "Distance( obj1, obj2 )",
    "parameter": [
      {
        "_name": "obj1",
        "_value": "UObject Reference"
      },
      {
        "_name": "obj2",
        "_value": "UObject Reference"
      }
    ],
    "explain": [
      "Determines the distance between two objects.  If either object is in a container, \n        uses the world-position of its ultimate-parent container.",
      "Notes: This distance is defined as the greater of the x-distance and the y-distance. z-distance \n       is not taken into account.  (This is neither Pythagorean distance nor Manhattan distance)"
    ],
    "return": "Integer - calculated distance on success",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "Distance"
    },
  
  {
    "prototype": "EnumerateItemsInContainer( container, flags := 0 )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container Reference"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Returns an array of the contents of a container.",
      "Notes: If 'container' is itself locked, its contents will still be enumerated.",
      {
        "code": "const ENUMERATE_IGNORE_LOCKED := 0x1; // List content of locked container\nconst ENUMERATE_ROOT_ONLY     := 0x2; // Do not list contents of sub-containers.",
        "__text": "Notes: uo.em constant for this function:"
      }
    ],
    "return": "An Array of Item References on success",
    "error": [
      "\"Invalid parameter type\"",
      "none (returns 0 on different errors)"
    ],
    "related": "Container",
    "_name": "EnumerateItemsInContainer"
    },
  
  {
    "prototype": "EnumerateOnlineCharacters()",
    "explain": "Gets a list of all online player characters.",
    "return": "An Array of Character References on success",
    "error": "none",
    "related": "Character",
    "_name": "EnumerateOnlineCharacters"
    },
  
  {
    "prototype": "EquipFromTemplate( character, template )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "template",
        "_value": "String"
      }
    ],
    "explain": [
      "Creates equipment for a character, using EQUIP.CFG.",
      "Notes: Element properties in EQUIP.CFG can have the following formats:\n      Equip [hex_objtype] [hex_color]\n      Armor [armor_template_name]\n      Weapon [weapon_template_name]\n      Note that object type and color must be in hex format (0xHHHH)",
      "Will not create an item that is not equippable."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Equipment template not found\"",
      "\"Blech! Can't find '[object name]' named in equip.cfg\""
    ],
    "related": [
      "Character",
      "Equipment"
    ],
    "relatedcfg": "equip.cfg",
    "_name": "EquipFromTemplate"
    },
  
  {
    "prototype": "GetAmount( item )",
    "parameter": {
      "_name": "item",
      "_value": "Item Reference"
    },
    "explain": [
      "Returns size of item stack.",
      "probably better to use item.amount"
    ],
    "return": "Integer  size of item's stack on success",
    "error": "none (returns 0 on invalid parameter)",
    "related": "Item",
    "_name": "GetAmount"
    },
  
  {
    "prototype": "GrantPrivilege( character, privilege )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "privilege",
        "_value": "String"
      }
    ],
    "explain": [
      "Grants a privilege to a character.",
      "Notes: see some other doc for a list of privs and their functions"
    ],
    "return": "1 f the privilege was granted successfully",
    "error": "\"Invalid parameter\"",
    "related": "Character",
    "_name": "GrantPrivilege"
    },
  
  {
    "prototype": "ListGhostsNearLocation( x, y, z, range, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for ghosts within \"range\" squares of (x,y,z).",
      "Notes: 19 is used for the z-range.  \n         Rectangular range is used - x-range and y-range are compared independently \n      This call is equivalent to ListMobilesNearLocationEx( x, y, z, range, LISTEX_GHOST, realm ).\n          For this reason, this function is depreciated."
    ],
    "return": "An array of Character References of ghosts found near the location on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": "Character",
    "_name": "ListGhostsNearLocation"
    },
  
  {
    "prototype": "ListItemsNearLocation( x, y, z, range, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for items within range squares of (x,y,z).",
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "<uninitialized object> if invalid parameters, or Array of Item References of Items found near the location.",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListItemsNearLocation"
    },
  
  {
    "prototype": "ListItemsNearLocationOfType( x, y, z, range, objtype, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "objtype",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for items within range squares of (x,y,z) of type objtype.",
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "<uninitialized object> if invalid parameters, or Array of Item References of Items matching \"objtype\" found near the location.",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListItemsNearLocationOfType"
    },
  
  {
    "prototype": "ListMobilesInLineOfSight( object, range )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "range",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Gets list of mobiles in line of sight of \"object\", maximum \"range\" tiles away.",
      "Notes: Finds living, non-hidden mobiles within range tiles of object, that have LOS with it."
    ],
    "return": "An Array of Character References on success",
    "error": "\"Invalid parameter\"",
    "related": "UObject",
    "_name": "ListMobilesInLineOfSight"
    },
  
  {
    "prototype": "ListMobilesNearLocation( x, y, z, range, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for mobiles within range squares of (x,y,z).",
      "Notes: Finds living, non-hidden mobiles found near the location.",
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "An Array of Character References",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Character",
      "Array"
    ],
    "_name": "ListMobilesNearLocation"
    },
  
  {
    "prototype": "ListMobilesNearLocationEx( x, y, z, range, flags, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for mobiles within range squares of (x,y,z).",
      {
        "code": "const LISTEX_FLAG_NORMAL := 0x01;\nconst LISTEX_FLAG_HIDDEN := 0x02;\nconst LISTEX_FLAG_GHOST  := 0x04;\nconst LISTEX_FLAG_CONCEALED  := 0x08;",
        "__text": "Notes: uo.em constants for flags - include mobile types:"
      },
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "An Array of Character References of mobiles found matching the search criteria.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Character",
      "Array"
    ],
    "_name": "ListMobilesNearLocationEx"
    },
  
  {
    "prototype": "ListOfflineMobilesInRealm(realm := _DEFAULT_REALM)",
    "parameter": {
      "_name": "realm",
      "_value": "String - case-sensitive name of the realm"
    },
    "explain": [
      "returns the list of offline mobiles in a specific realm.",
      "Useful for moving the offline mobiles out of a shadow realm before deleting it."
    ],
    "return": "An Array of Character References of mobiles found.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Character",
      "Array"
    ],
    "_name": "ListOfflineMobilesInRealm"
    },
  
  {
    "prototype": "PrintTextAbove( above_object, text, font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR, journal_print := JOURNAL_PRINT_NAME)",
    "parameter": [
      {
        "_name": "above_object",
        "_value": "UObject Reference"
      },
      {
        "_name": "text",
        "_value": "String"
      },
      {
        "_name": "font",
        "_value": "Integer (optional)"
      },
      {
        "_name": "color",
        "_value": "Integer (optional)"
      },
      {
        "_name": "journal_print",
        "_value": "Integer (optional)"
      }
    ],
    "explain": [
      "Prints text above an object, as if spoken.",
      "Notes: see client.inc for suitable values for font and color",
      {
        "code": "const JOURNAL_PRINT_NAME  := 0x00; // Implicit.  Print's the object's description / npc's name in the journal.\nconst JOURNAL_PRINT_YOU_SEE := 0x01; // Will print \"You see:\" in the journal.",
        "__text": "Notes: journal_print flags:"
      }
    ],
    "return": [
      "0 if text was too long (>200 characters)",
      "1 on success"
    ],
    "error": "\"A parameter was invalid\"",
    "related": "UObject",
    "_name": "PrintTextAbove"
    },
  
  {
    "prototype": "PrintTextAbovePrivate( above_object, text, character, font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR, journal_print := JOURNAL_PRINT_NAME )",
    "parameter": [
      {
        "_name": "above_object",
        "_value": "UObject Reference"
      },
      {
        "_name": "text",
        "_value": "String"
      },
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "font",
        "_value": "Integer (optional)"
      },
      {
        "_name": "color",
        "_value": "Integer (optional)"
      },
      {
        "_name": "journal_print",
        "_value": "Integer (optional)"
      }
    ],
    "explain": [
      "Causes text to be displayed above \"above_object\", as if spoken. This text will only \n        be seen by a single character referenced by \"character\"",
      "Notes: see client.inc for suitable values for font and color",
      {
        "code": "const JOURNAL_PRINT_NAME  := 0x00; // Implicit.  Print's the object's description / npc's name in the journal.\nconst JOURNAL_PRINT_YOU_SEE := 0x01; // Will print \"You see:\" in the journal.",
        "__text": "Notes: journal_print flags:"
      }
    ],
    "return": [
      "0 if text was too long (>200 characters)",
      "1 on success"
    ],
    "error": "\"A parameter was invalid\"",
    "related": [
      "UObject",
      "Character"
    ],
    "_name": "PrintTextAbovePrivate"
    },
  
  {
    "prototype": "ReadGameClock()",
    "explain": [
      "Returns the total number of seconds the server has been active.",
      "Notes: The Game Clock is a seconds-counter.  It is started after all data is read, and is \n      stopped just before writing data.  It has no relationship to real-world calendar time.  \n      It counts real-time seconds - if the system is running slow, it will reliably tell you \n      how many real-time seconds have passed while the game was running."
    ],
    "return": "Integer - The current value of the game clock.",
    "error": "none",
    "_name": "ReadGameClock"
    },
  
  {
    "prototype": "RequestInput(character, item, prompt )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "prompt",
        "_value": "String"
      }
    ],
    "explain": [
      "Prompts a player for input, and waits for the player to type a line of text.",
      "Notes: \"item\" is a placeholder - the client needs it, but it is not used internally.  \n      Typically some related item will be passed."
    ],
    "return": "A String containing the next line of text from the client's keyboard on success. Returns 0 (int) if control characters were found in the string.",
    "error": [
      "\"Invalid parameter\"",
      "\"No client attached\"",
      "\"Another script has an active prompt\""
    ],
    "related": [
      "Character",
      "Item"
    ],
    "_name": "RequestInput"
    },
  
  {
    "prototype": "RestartScript( npc )",
    "parameter": {
      "_name": "npc",
      "_value": "Character Reference (must be an NPC)"
    },
    "explain": [
      "Stops the current master script for an NPC, and starts a new one.",
      "npc.script can be assigned before calling this, to change the master script for an NPC."
    ],
    "return": "1 if the script was started",
    "error": [
      "\"Invalid parameter\"",
      "\"RestartScript only operates on NPCs\""
    ],
    "related": "NPC",
    "_name": "RestartScript"
    },
  
  {
    "prototype": "Resurrect( mobile, flags := 0 )",
    "parameter": [
      {
        "_name": "mobile",
        "_value": "Character Reference"
      },
      {
        "_name": "flags",
        "_value": "integer flags"
      }
    ],
    "explain": {
      "code": "flags:\nconst RESURRECT_FORCELOCATION := 0x01;",
      "__text": "Resurrects a ghost. Checks to see if the location occupied by the ghost is valid for an alive character first unless flags ==  RESURRECT_FORCELOCATION. (Be very careful with this unless you like exploits)"
    },
    "return": "1 if the ghost was resurrected successfully",
    "error": [
      "\"Invalid parameter type\"",
      "\"That is not dead\"",
      "\"That location is blocked\""
    ],
    "related": "Character",
    "_name": "Resurrect"
    },
  
  {
    "prototype": "RevokePrivilege( character, privilege )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "privilege",
        "_value": "String"
      }
    ],
    "explain": "Revokes a privilege from a character.",
    "return": "1 if the privilege was revoked, or if it was not previously granted.",
    "error": "\"Invalid parameter\"",
    "related": "Character",
    "_name": "RevokePrivilege"
    },
  
  {
    "prototype": "SaveWorldState()",
    "explain": "Saves the current world state.",
    "return": "struct { CleanObjects, DirtyObjects, ElapsedMilliseconds }",
    "error": [
      "\"Exception during world save\"",
      "\"pol.cfg has InhibitSaves=1\""
    ],
    "_name": "SaveWorldState"
    },
  
  {
    "prototype": "SendSysMessage( character, text, font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "text",
        "_value": "String"
      },
      {
        "_name": "font",
        "_value": "Integer (optional)"
      },
      {
        "_name": "color",
        "_value": "Integer (optional)"
      }
    ],
    "explain": [
      "Displays a System Message in the lower-left corner of character's player's screen.",
      "Notes: see client.inc for suitable values of font and color."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"Mobile has no active client\""
    ],
    "related": "Character",
    "_name": "SendSysMessage"
    },
  
  {
    "prototype": "SetRegionLightLevel( regionname, lightlevel )",
    "parameter": [
      {
        "_name": "regionname",
        "_value": "String"
      },
      {
        "_name": "lightlevel",
        "_value": "Integer (0..30)"
      }
    ],
    "explain": [
      "Sets the light level of a region by name.",
      "Notes: lightlevel must be a value between 0 and 30 where 0 is daylight and 30 is near-total darkness. \n       regionname must match a region name from REGIONS\\LIGHT.CFG."
    ],
    "return": "1 if the light level was set successfully",
    "error": [
      "\"Invalid Parameter type\"",
      "\"Light Level is out of range\"",
      "\"Light region not found\""
    ],
    "relatedcfg": "light.cfg",
    "_name": "SetRegionLightLevel"
    },
  
  {
    "prototype": "SystemFindObjectBySerial( serial, sysfind_flags := 0 )",
    "parameter": [
      {
        "_name": "serial",
        "_value": "Integer"
      },
      {
        "_name": "sysfind_flags",
        "_value": "Integer (optional, default 0)"
      }
    ],
    "explain": [
      "Searches the world for an item or mobile by serial number. This could be used\n        if the serial number of an object was saved with SetObjProperty, for example.",
      {
        "code": "const SYSFIND_SEARCH_OFFLINE_MOBILES := 1;",
        "__text": "Notes: uo.em constants for flags:"
      }
    ],
    "return": "A Character Reference, Item Reference, or Multi reference on success.",
    "error": [
      "\"Invalid parameter type\"",
      "\"Character not found\"",
      "\"Item not found.\""
    ],
    "_name": "SystemFindObjectBySerial"
    },
  
  {
    "prototype": "Target( by_character, options := TGTOPT_CHECK_LOS+TGTOPT_NEUTRAL)",
    "parameter": [
      {
        "_name": "by_character",
        "_value": "Character Reference"
      },
      {
        "_name": "options",
        "_value": "Integer (Optional)"
      }
    ],
    "explain": [
      "Sends a target cursor to \"by_character\"'s client, and waits for the player to target something.",
      "Notes: Options control Line-of-sight checking.",
      "0 is returned if the character does not have line-of-sight to the object.",
      {
        "code": "const TGTOPT_CHECK_LOS   := 0x0001;\nconst TGTOPT_NOCHECK_LOS := 0x0000; // to be explicit\nconst TGTOPT_HARMFUL     := 0x0002;\nconst TGTOPT_NEUTRAL     := 0x0000; // to be explicit\nconst TGTOPT_HELPFUL     := 0x0004;",
        "__text": "uo.em constants for options, just add together non-mutually exclusive options."
      },
      "The first 2 options specify if Line-of-sight to the targetting obejct should be checked or not.\n       The last 3 options are involved with the reputation system. Use TGTOPT_HARMFUL if the effect that\n       uses the target is a hostile action (like casting fireball), use _HELPFUL for things like healing\n       and use _NEUTRAL for reputation-neutral actions."
    ],
    "return": [
      "0 if user cancelled, or nothing targetted, or no LOS to target (if option is selected)",
      "UObject Reference on success (item or character or multi)"
    ],
    "error": [
      "\"Invalid parameter type\"",
      "\"No client connected\"",
      "\"Client busy with another target cursor\""
    ],
    "related": [
      "UObject",
      "Character"
    ],
    "_name": "Target"
    },
  
  {
    "prototype": "TargetCoordinates( by_character )",
    "parameter": {
      "_name": "by_character",
      "_value": "Character Reference"
    },
    "explain": [
      "Sends a target cursor to a character's client, and waits for the player to target a ground tile.",
      "Notes: Line-of-sight is not checked."
    ],
    "return": [
      "A Structure on success: \nmembers: structure.x,structure.y,structure.z,structure.realm - containing the location targetted. \n     structure.objtype - containing the objtype of the static object targetted.",
      "Not always present members:",
      "structure.item contains an Item Reference to a dynamic item targetted.",
      "structure.mobile contains a Character Reference to a mobile targetted.",
      "structure.multi contains Multi Reference if coords are inside a multi",
      "0 if the target cursor was cancelled or the client disconnected."
    ],
    "error": [
      "\"Invalid parameter type\"",
      "\"Mobile has no active client\"",
      "\"Client has an active target cursor\""
    ],
    "related": "Character",
    "_name": "TargetCoordinates"
    },
  
  {
    "prototype": "AddMenuItem( menu, objtype, text, color:=0 )",
    "parameter": [
      {
        "_name": "menu",
        "_value": "Dynamic Menu Reference (from CreateMenu())"
      },
      {
        "_name": "objtype",
        "_value": "Integer tile graphic to add to menu"
      },
      {
        "_name": "text",
        "_value": "String description"
      },
      {
        "_name": "color",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Adds a menu item to a dynamic menu.",
      "Notes: The 'objtype' field of a mobile is not appropriate here.  There is special art for \n      mobiles for use in menus.  Human Males (object type: 0x190) use 0x2106, females 0x2107.  \n      Use InsideUO to determine other values.\n      Color defaults to 0 if no itemdesc.cfg entry exists.\n      Hint: menus.cfg uses the color of the itemdesc entry of the objtype given.",
      "0 for objtype creates a checkbox-style menu"
    ],
    "return": "1 if the item was added successfully",
    "error": "none (returns 0 on invalid parameters)",
    "_name": "AddMenuItem"
    },
  
  {
    "prototype": "CreateMenu( title )",
    "parameter": {
      "_name": "title",
      "_value": "String"
    },
    "explain": "Creates an empty dynamic \"old-style item selection\" menu.",
    "return": "A dynamic menu reference if the menu was created successfully",
    "error": "none (returns 0 on invalid parameter)",
    "_name": "CreateMenu"
    },
  
  {
    "prototype": "SelectMenuItem2( character, menuname )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "menuname",
        "_value": "String name of the static menu in menus.cfg, or a dynamic menu reference"
      }
    ],
    "explain": [
      "Displays an object menu on the character's client for the player to select from.",
      "Notes: Can take a static or dynamic menu."
    ],
    "return": [
      "0 if the menu was cancelled, or the character's client disconnected.",
      "A Structure on success:\n        .objtype = Integer object type of the selection. \n        .index = 1-based index within the menu of the selection. \n        .graphic = Integer graphic of the object. \n        .color = color of the object."
    ],
    "error": [
      "\"Invalid parameter\"",
      "\"Client is busy, or menu is empty\"",
      "\"Menu too large\""
    ],
    "related": "Character",
    "relatedcfg": "menus.cfg",
    "_name": "SelectMenuItem2"
    },
  
  {
    "prototype": "EraseObjProperty( object, propname )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "propname",
        "_value": "String"
      }
    ],
    "explain": "Removes a property from the custom-property (\"cprop\") list of an object. propertyname is case-sensative",
    "return": "1 if the property was erased or did not exist.",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "EraseObjProperty"
    },
  
  {
    "prototype": "GetObjProperty( object, property_name )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "property_name",
        "_value": "String"
      }
    ],
    "explain": "Retrieves custom data (a \"cprop\") associated with an object. propertyname is case-sensative",
    "return": "On success, the unpacked object that was saved with SetObjProperty. This could be a\n       string, integer, real, array, struct, dictionary, etc.",
    "error": [
      "\"Invalid parameter type\"",
      "\"Property not found\""
    ],
    "related": "UObject",
    "_name": "GetObjProperty"
    },
  
  {
    "prototype": "SetObjProperty( object, property_name, property_value )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "property_name",
        "_value": "String"
      },
      {
        "_name": "property_value",
        "_value": "a script object (could be string, int, real, array, etc)"
      }
    ],
    "explain": "Sets a custom data property on an object. This data will be saved with the object, for later retrieval with GetObjProperty. propertyname is case-sensative",
    "return": "1 on success",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "SetObjProperty"
    },
  
  {
    "prototype": "EraseGlobalProperty( propname )",
    "parameter": {
      "_name": "propname",
      "_value": "String"
    },
    "explain": "Removes a property from the global property list. propertyname is case-sensative",
    "return": "1 if the property was erased or did not exist.",
    "error": "\"Invalid parameter type\"",
    "_name": "EraseGlobalProperty"
    },
  
  {
    "prototype": "GetGlobalProperty( propname )",
    "parameter": {
      "_name": "propname",
      "_value": "String"
    },
    "explain": "Retrieves the value of a global property. propertyname is case-sensative",
    "return": "On success a script object (string, integer, real, array, etc) containing the value of the named property",
    "error": [
      "\"Invalid parameter type\"",
      "\"Property not found\""
    ],
    "_name": "GetGlobalProperty"
    },
  
  {
    "prototype": "SetGlobalProperty( propname, propval )",
    "parameter": [
      {
        "_name": "propname",
        "_value": "String"
      },
      {
        "_name": "propval",
        "_value": "a script object (could be string, int, real, array, etc)"
      }
    ],
    "explain": "Sets the value of a global property. propertyname is case-sensative",
    "return": "1 on success",
    "error": "\"Invalid parameter type\"",
    "_name": "SetGlobalProperty"
    },
  
  {
    "prototype": "GetGlobalPropertyNames()",
    "explain": "Gets all the global property names. Use GetGlobalProperty(returned_array[i]) to get the property value.",
    "return": "Array of strings",
    "_name": "GetGlobalPropertyNames"
    },
  
  {
    "prototype": "PerformAction( character, action, framecount := 5, repeatcount := 1, backward := ACTION_DIR_FORWARD, repeatflag := ACTION_NOREPEAT, delay := 1 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "action",
        "_value": "Integer"
      },
      {
        "_name": "framecount",
        "_value": "Integer (Optional)"
      },
      {
        "_name": "repeatcount",
        "_value": "Integer (Optional)"
      },
      {
        "_name": "backward",
        "_value": "Integer (Optional)"
      },
      {
        "_name": "repeatflag",
        "_value": "Integer (Optional)"
      },
      {
        "_name": "delay",
        "_value": "Integer (Optional)"
      }
    ],
    "explain": [
      "Causes character to perform an action, such as Bow or Salute.",
      "Notes: see client.inc for valid action IDs",
      {
        "code": "const ACTION_DIR_FORWARD  := 0;\nconst ACTION_DIR_BACKWARD := 1;\nconst ACTION_NOREPEAT     := 0;\nconst ACTION_REPEAT       := 1;"
      }
    ],
    "return": "1 on success",
    "error": "\"Invalid parameter\"",
    "related": "Character",
    "_name": "PerformAction"
    },
  
  {
    "prototype": "PlayLightningBoltEffect( center_object )",
    "parameter": {
      "_name": "center_object",
      "_value": "UObject Reference"
    },
    "explain": "Plays a lightning bolt effect centered on the object.",
    "return": "1 on success",
    "error": "none (returns 0 if invalid parameter).",
    "related": "UObject",
    "_name": "PlayLightningBoltEffect"
    },
  
  {
    "prototype": "PlayMovingEffect( source, target, effect, speed, loop := 0, explode := 0 )",
    "parameter": [
      {
        "_name": "source",
        "_value": "UObject Reference"
      },
      {
        "_name": "target",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (0..255)"
      },
      {
        "_name": "loop",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "explode",
        "_value": "Integer (Optional, 0..255)"
      }
    ],
    "explain": [
      "Causes a moving effect to be played, travelling from source to destination",
      "Notes: effect = an item graphic number (the first in a series if an animation) \n       speed = how fast the effect should travel. \n       loop = 0/1 loop the animation? \n       explode = 0/1 show an explosion at destination at the end of the effect?"
    ],
    "return": "1 on success",
    "error": "none (returns 0 if invalid parameter)",
    "related": "UObject",
    "_name": "PlayMovingEffect"
    },
  
  {
    "prototype": "PlayObjectCenteredEffect( center, effect, speed, loop := 0)",
    "parameter": [
      {
        "_name": "center",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (0..255)"
      },
      {
        "_name": "loop",
        "_value": "Integer (Optional, 0..255)"
      }
    ],
    "explain": [
      "Causes an effect to be played, centered on uobject, which follows uobject if it moves.",
      "Notes: see PlayMovingEffect for effect, speed, loop description\n       This is used for effects like flame strike and reactive armor."
    ],
    "return": "1 on success",
    "error": "none (returns 0 on invalid parameter)",
    "related": "UObject",
    "_name": "PlayObjectCenteredEffect"
    },
  
  {
    "prototype": "PlaySoundEffect( object, effect )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Causes a sound effect to be played, centered on object.",
      "Notes: see client.inc for sound effect constants",
      "All clients within a range of 18 tiles are sent this command. Use PlaySoundEffectPrivate() for private sounds."
    ],
    "return": "1 on success",
    "error": "\"Invalid parameter\"",
    "related": "UObject",
    "_name": "PlaySoundEffect"
    },
  
  {
    "prototype": "PlaySoundEffectXYZ( x, y, z, effect, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Causes a sound effect to be played, centered on Location.",
      "Notes: see client.inc for sound effect constants",
      "All clients within a range of 18 tiles are sent this command. Use PlaySoundEffectPrivate() for private sounds."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for realm\""
    ],
    "related": "UObject",
    "_name": "PlaySoundEffectXYZ"
    },
  
  {
    "prototype": "DestroyItem( Item )",
    "parameter": {
      "_name": "Item",
      "_value": "Item Reference"
    },
    "explain": [
      "Removes an item from the world.  Transmits commands to each client in range of item to reflect this.",
      "Notes: runs the Item's destroy script, if any."
    ],
    "return": [
      "1 if the item was destroyed",
      "0 if the item's destroy script disallowed destruction"
    ],
    "error": [
      "\"That item is being used.\"",
      "\"Invalid parameter type\""
    ],
    "related": "Item",
    "_name": "DestroyItem"
    },
  
  {
    "prototype": "EquipItem( mobile, item )",
    "parameter": [
      {
        "_name": "mobile",
        "_value": "Character Reference"
      },
      {
        "_name": "item",
        "_value": "Item Reference"
      }
    ],
    "explain": [
      "Equips an item on a mobile.",
      "Notes: If item is in a container, it will be removed from the container.",
      "\"Equippable\" means that the character does not have a similar item equipped, and that the item is an equipment-type item.",
      "Carrying-capacity and strength requirements will fall under this category as well.",
      "To \"unequip\" an item, move it to another location (typically a backpack)",
      "Runs the Item's Equiptest and Equip scripts, if any."
    ],
    "return": [
      "1 if the item was equipped succesfully",
      "0 if the item's Equip script returned false"
    ],
    "error": [
      "\"That is immobile\"",
      "\"That item is being used.\"",
      "\"That item is not equippable by that character\" if equiptest script failed.",
      "\"Invalid parameter type\""
    ],
    "related": [
      "Character",
      "Item"
    ],
    "_name": "EquipItem"
    },
  
  {
    "prototype": "MoveItemToContainer( item, container, x := -1, y := -1, add_to_existing_stack := 0 )",
    "parameter": [
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "container",
        "_value": "Container Reference"
      },
      {
        "_name": "x",
        "_value": "Integer coords inside container gump (optional)"
      },
      {
        "_name": "y",
        "_value": "Integer coords inside container gump (optional)"
      },
      {
        "_name": "add_to_existing_stack",
        "_value": "Defines if the items moved to the container will look for an existing stack and add to it or just add as a new item ( old behaviour )"
      }
    ],
    "explain": [
      "Moves an item into a container.",
      "Notes: If the default values for x and y are passed, or if x or y does not fall within the\n       legal bounds for a container as found in ITEMDESC.CFG, then a random location \n       within the container will be chosen.",
      "Calls the item's unequiptest and unequip scripts, if any.",
      "Calls the container's canInsert and onInsert scripts, if any.",
      "Calls the item's original container's (if any) canRemove and onRemove scripts, if any.",
      "If add_to_existing_stack == 1 and there is no stack in the container, it will return Error \"There is no existing stack\", so its up to scripts to check this.",
      "If add_to_existing_stack == 2 and there is no stack in the container, it will just add as a new item like when add_to_existing_stack == 0."
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"That is immobile\"",
      "\"That item is being used.\"",
      "\"Non-container selected as target\"",
      "\"Can't put a container into itself\"",
      "\"Can't put a container into an item in itself\"",
      "\"Container is too full to add that\"",
      "\"Item cannot be unequipped\"",
      "\"There is no existing stack\""
    ],
    "related": [
      "Item",
      "Container"
    ],
    "_name": "MoveItemToContainer"
    },
  
  {
    "prototype": "SubtractAmount( item, amount )",
    "parameter": [
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "amount",
        "_value": "Integer"
      }
    ],
    "explain": "Decreases the stack size of an item.  If nothing is left, deletes the item.",
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"That item is being used.\""
    ],
    "related": "Item",
    "_name": "SubtractAmount"
    },
  
  {
    "prototype": "CreateMultiAtLocation( x, y, z, objtype, flags := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype, OR String ObjtypeName, OR GetItemDescriptor struct."
      },
      {
        "_name": "flags",
        "_value": "Integer (optional)"
      }
    ],
    "explain": [
      "Creates a \"multi\" object (house or boat) at a location.",
      {
        "code": "houses only:\nconst CRMULTI_IGNORE_MULTIS     := 0x0001; //ignore intersecting multis\nconst CRMULTI_IGNORE_OBJECTS    := 0x0002; //ignore dynamic objects\nconst CRMULTI_IGNORE_WORLDZ     := 0x0004; //ignore standability,relative Z,world height\nconst CRMULTI_IGNORE_ALL        := 0x0007;",
        "__text": "Notes: uo.em constants for flags:"
      },
      "objtype must be a multi type as defined in itemdesc.cfg having a type House or Boat.",
      "For Boats: Position must be passable - every part of the hull sits on water, and no \n                hull location is occupied by the hull of another ship, nor a static or \n                dynamic blocking item. \n              Runs scripts/misc/boat.ecl on creation."
    ],
    "return": "Boat Reference or House Reference on success, and adds the multi to the world",
    "error": [
      "\"Invalid parameter type\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"That location is out of bounds\"",
      "\"That objtype is not a Multi\"",
      "\"Don't know what kind of multi to make\"",
      "Boats:",
      "\"Multi definition not found for Boat, objtype=X, graphic=Y\"",
      "\"No boatshape for Boat in boats.cfg, objtype=X, graphic=Y\"",
      "\"Position indicated is impassable\"",
      "Houses:",
      "\"Multi definition not found for House, objtype=X, graphic=Y\"",
      "\"Location intersects with another structure\" (use CRMULTI_IGNORE_MULTIS)",
      "\"Something is blocking that location\" (use CRMULTI_IGNORE_OBJECTS)",
      "\"That location is not suitable\" (use CRMULTI_IGNORE_WORLDZ)"
    ],
    "related": [
      "House",
      "Boat"
    ],
    "_name": "CreateMultiAtLocation"
    },
  
  {
    "prototype": "TargetMultiPlacement( character, objtype, flags := 0, xoffset := 0, yoffset := 0, hue := 0 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer (optional)"
      },
      {
        "_name": "xoffset",
        "_value": "Integer offset to 'ghost' target house"
      },
      {
        "_name": "yoffset",
        "_value": "Integer offset to 'ghost' target house"
      },
      {
        "_name": "hue",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Sends character a \"ghost\" multi to select placement location in the world.",
      "Notes: objtype must be from an itemdesc.cfg entry with a Boat or House type.",
      {
        "code": "const CRMULTI_FACING_NORTH      := 0x0000;  \nconst CRMULTI_FACING_EAST       := 0x0100;\nconst CRMULTI_FACING_SOUTH      := 0x0200;\nconst CRMULTI_FACING_WEST       := 0x0300;",
        "__text": "boats only constants for flags:"
      },
      "For House target placement, flags should == 0.",
      {
        "code": "var dims := GetMultiDimensions( 0x6071 );\n    if(!dims) return; endif\n    var loc := TargetMultiPlacement( who, 0x6071, 0, 0, dims.ymax );\n    if(!loc) return; endif\n    var house := CreateMultiAtLocation( loc.x, loc.y - dims.ymax, loc.z, 0x6071, 0, who.realm );",
        "__text": "NOTE: the coordinates returned by this are the coordinates of the \"target\" cursor, not the center of the house if you use x/yoffset! So if you want to have the front steps be under the cursor, you must transform the parameters to CreateMultiAtLocation to include your xoffset and yoffset. Positive offsets move the cursor left/down in relation to the ghost house. An example using the front steps to target:"
      }
    ],
    "return": "A Structure (x,y,z) containing the location targetted on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"Client busy with another target cursor\"",
      "\"Object Type is out of range for Multis\""
    ],
    "related": [
      "House",
      "Boat",
      "Character"
    ],
    "_name": "TargetMultiPlacement"
    },
  
  {
    "prototype": "RegisterForSpeechEvents( at_object, range, flags := 0 )",
    "parameter": [
      {
        "_name": "at_object",
        "_value": "UObject Reference"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer (optional)"
      }
    ],
    "explain": [
      "Player-character speech spoken within \"range\" tiles of \"at_object\" will generate \n        speech events, which are sent to \"at_object\"'s control script (use wait_for_event()\n        to retreive the event).",
      "uo.em constants for flags:\n          const LISTENPT_HEAR_GHOSTS      := 0x01;"
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter type\"",
      "\"Already registered for speech events\""
    ],
    "related": [
      "UObject",
      "Item",
      "Character"
    ],
    "_name": "RegisterForSpeechEvents"
    },
  
  {
    "prototype": "EnableEvents( eventtype, range := -1 )",
    "parameter": [
      {
        "_name": "eventtype",
        "_value": "Integer"
      },
      {
        "_name": "range",
        "_value": "Integer (optional, 0..32)"
      }
    ],
    "explain": [
      "Enables events specified. When enabled events occur, they will be placed on the \n        script's event queue, and must be read with wait_for_event.  Events that were \n        previously enabled will remain enabled.",
      "Notes: See include/sysevent.inc for event type constants.  DO NOT use this function for \n         non-system event IDs. For user-created events, just send the event, no need to enable\n         it first.",
      "This function is useful only to NPCs and Items that have called RegisterForSpeechEvents.",
      "Range is only used for certain events (currently speech, and entered/leftarea events)"
    ],
    "return": "Integer new event \"mask\" on success",
    "error": "\"Invalid parameter\"",
    "_name": "EnableEvents"
    },
  
  {
    "prototype": "GetHarvestDifficulty( resource, x, y, tiletype, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "resource",
        "_value": "String"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "tiletype",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Determines the difficulty of harvesting a resource from location (x,y).",
      "Notes: tiletype will typically be .objtype from TargetCoordinates() \n       Checks the location for an object of type 'tiletype'. This tiletype may be a \n         landtile or an object tile.",
      "\"resource\" is something like \"ore\" \"wood\" \"fish\", etc. see regions/resource.cfg,\n       regions/ore.cfg, etc.",
      "Formula: random_int( (90 - (units * 80 / units_per_area_)) * 2 )"
    ],
    "return": "An integer difficulty level if resources exist.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"No resource by that name\"",
      "\"No resource-bearing landmark there\"",
      "\"No resource region at that location\"",
      "\"Resource is depleted\""
    ],
    "relatedcfg": "resource.cfg",
    "_name": "GetHarvestDifficulty"
    },
  
  {
    "prototype": "HarvestResource( resource, x, y, b, n, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "resource",
        "_value": "String"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "b",
        "_value": "Integer"
      },
      {
        "_name": "n",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Attempts to harvest a resource from a location.",
      "Notes: Harvests a*b resource units, where 0 is less than or equal to 'a'  and 'a' is less than or \nequal to n.  Thus you can request 0-40  units in groups of 5, etc."
    ],
    "return": "Integer number of resource units harvested if resources were harvested, or 0 if \n         no resources were available.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"No resource by that name\"",
      "\"No resource region at that location\""
    ],
    "relatedcfg": "resource.cfg",
    "_name": "HarvestResource"
    },
  
  {
    "prototype": "CreateItemCopyAtLocation(x, y, z, item, realm := _DEFAULT_REALM)",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "item",
        "_value": "Item Reference"
      }
    ],
    "explain": "makes a clone of the item\n      referenced with \"itemref\" at location x,y,z. Copies member variables and CProps. Does\n      not work with Multi objects. Does not copy a container's contents.",
    "return": "A new Item Reference",
    "error": [
      "\"Invalid parameter type\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"Unable to clone item\"",
      "\"This function does not work with Multi objects.\""
    ],
    "related": "Item",
    "relatedcfg": "itemdesc.cfg",
    "_name": "CreateItemCopyAtLocation"
    },
  
  {
    "prototype": "SendQuestArrow(to_whom, x := -1, y := -1, target := \"\")",
    "parameter": [
      {
        "_name": "to_whom",
        "_value": "Character reference the arrow shows to"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "target",
        "_value": "Item or Character reference"
      }
    ],
    "explain": [
      "Sends a \"quest arrow\" to the player that points at x,y",
      "Passing 'x' and 'y' within map bounds will set the Quest Arrow to point at that location.",
      "Passing -1 as 'x' and 'y' (ie. by just called SendQuestArrow(to_whom)) will remove it.",
      "If the client is HSA (client version > 7.0.9), \"target\" is required. Otherwise it will be ignored."
    ],
    "return": "1 on success",
    "error": [
      "\"No client attached\"",
      "\"Invalid parameter\"",
      "\"No valid target for HSA client\""
    ],
    "related": "Character",
    "_name": "SendQuestArrow"
    },
  
  {
    "prototype": "ListItemsNearLocationWithFlag( x, y, z, range, flags, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Gets an array of itemrefs if its graphic matches any of the OR'd flags passed. \"flags\" here are \n    tiledata.mul flags for the item's graphic.",
      {
        "code": "const TILEDATA_FLAG_BACKGROUND  := 0x00000001; //Background\nconst TILEDATA_FLAG_WEAPON      := 0x00000002; //Weapon\nconst TILEDATA_FLAG_TRANSPARENT := 0x00000004; //Transparent\nconst TILEDATA_FLAG_TRANSLUCENT := 0x00000008; //Translucent\nconst TILEDATA_FLAG_WALL        := 0x00000010; //Wall\nconst TILEDATA_FLAG_DAMAGING    := 0x00000020; //Damaging\nconst TILEDATA_FLAG_IMPASSABLE  := 0x00000040; //Impassable\nconst TILEDATA_FLAG_WET         := 0x00000080; //Wet\nconst TILEDATA_FLAG_UNK         := 0x00000100; //Unknown\nconst TILEDATA_FLAG_SURFACE     := 0x00000200; //Surface\nconst TILEDATA_FLAG_BRIDGE      := 0x00000400; //Bridge\nconst TILEDATA_FLAG_STACKABLE   := 0x00000800; //Generic/Stackable\nconst TILEDATA_FLAG_WINDOW      := 0x00001000; //Window\nconst TILEDATA_FLAG_NOSHOOT     := 0x00002000; //No Shoot\nconst TILEDATA_FLAG_PREFIX_A    := 0x00004000; //Prefix A\nconst TILEDATA_FLAG_PREFIX_AN   := 0x00008000; //Prefix An\nconst TILEDATA_FLAG_INTERNAL    := 0x00010000; //Internal (things like hair, beards, etc)\nconst TILEDATA_FLAG_FOLIAGE     := 0x00020000; //Foliage\nconst TILEDATA_FLAG_PARTIAL_HUE := 0x00040000; //Partial Hue\nconst TILEDATA_FLAG_UNK1        := 0x00080000; //Unknown 1\nconst TILEDATA_FLAG_MAP         := 0x00100000; //Map\nconst TILEDATA_FLAG_CONTAINER   := 0x00200000; //Container\nconst TILEDATA_FLAG_WEARABLE    := 0x00400000; //Wearable\nconst TILEDATA_FLAG_LIGHTSOURCE := 0x00800000; //LightSource\nconst TILEDATA_FLAG_ANIMATED    := 0x01000000; //Animated\nconst TILEDATA_FLAG_HOVEROVER   := 0x02000000; //HoverOver (gargoyle flying tiles)\nconst TILEDATA_FLAG_UNK2        := 0x04000000; //Unknown 2\nconst TILEDATA_FLAG_ARMOR       := 0x08000000; //Armor\nconst TILEDATA_FLAG_ROOF        := 0x10000000; //Roof\nconst TILEDATA_FLAG_DOOR        := 0x20000000; //Door\nconst TILEDATA_FLAG_STAIRBACK   := 0x40000000; //StairBack\nconst TILEDATA_FLAG_STAIRRIGHT  := 0x80000000; //StairRight",
        "__text": "Tiledata.mul flags:"
      },
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Item References of Items matching \"flags\" found near the location or Error.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListItemsNearLocationWithFlag"
    },
  
  {
    "prototype": "ListMultisInBox( x1,y1,z1, x2,y2,z2, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Lists all multis inside an imaginary box (where a multi must have at least one 'static' piece inside the box)",
      "Notes: This function will not generate \"Invalid Coordinates for realm\" Error, because some Scripter \"loves\" this \"bug\" :o/"
    ],
    "return": "Error or Array of all multis found inside the specified box.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "House",
      "Boat",
      "Array"
    ],
    "_name": "ListMultisInBox"
    },
  
  {
    "prototype": "SetName( object, name )",
    "parameter": [
      {
        "_name": "object",
        "_value": "UObject Reference"
      },
      {
        "_name": "name",
        "_value": "String"
      }
    ],
    "explain": "Sets name of item or mobile.",
    "return": "1 on success",
    "error": "none (returns 0 on failure)",
    "related": "UObject",
    "_name": "SetName"
    },
  
  {
    "prototype": "FindPath( x1, y1, z1, x2, y2, z2, realm := _DEFAULT_REALM, flags := FP_IGNORE_MOBILES, searchskirt := 5 )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "Integer world coordinates - start of the path"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates - start of the path"
      },
      {
        "_name": "z1",
        "_value": "Integer world coordinates - start of the path"
      },
      {
        "_name": "x2",
        "_value": "Integer world coordinates - destination"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates - destination"
      },
      {
        "_name": "z2",
        "_value": "Integer world coordinates - destination"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      },
      {
        "_name": "searchskirt",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Finds a path from start to destination and will return an array of coordinates, representing each step along the path from the next step to take from the start of the path to the actual destination.  The coordinates are found in .x, .y, and .z.",
      "Notes: The skirt around the square that is formed around the start of the path to the destination which represents the searchable area is set by searchskirt. Check out MaxPathFindRange in servspecopt.cfg too.",
      {
        "code": "// FindPath flags\nconst FP_IGNORE_MOBILES         := 0x01;    // ignore Mobiles\nconst FP_IGNORE_DOORS           := 0x02;    // ignore Doors (you've to open doors by yourself)",
        "__text": "Notes: uo.em constant for this function:"
      }
    ],
    "return": "Error or Array of coordinates, representing each step along the path.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Start Coordinates Invalid for Realm\"",
      "\"End Coordinates Invalid for Realm\"",
      "\"Beyond Max Range.\"",
      "\"Failed to find a path.\"",
      "\"Out of memory.\"",
      "\"Solution Corrupted!\"",
      "\"Pathfind Error.\""
    ],
    "related": [
      "NPC",
      "Array"
    ],
    "_name": "FindPath"
    },
  
  {
    "prototype": "UseItem( item, character )",
    "parameter": [
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "character",
        "_value": "Character Reference"
      }
    ],
    "explain": [
      "This will allow the item specified's use script to be run by the character specified.  No checks are done for distance, or check for being a ghost, or anything else.",
      "Warning: This function can also be called with NPC's as the character, but any use script that requires interactivity with it's user that is called on an NPC may have unpredictable results(dependant on the script)."
    ],
    "return": "1 on success, 0 or Error",
    "error": [
      "\"Invalid parameter\"",
      "\"Character busy.\"",
      "\"Failed to start script!\""
    ],
    "related": [
      "Item",
      "Character",
      "NPC"
    ],
    "_name": "UseItem"
    },
  
  {
    "prototype": "GetMultiDimensions( multiid )",
    "parameter": {
      "_name": "multiid",
      "_value": "Multi Graphic ID"
    },
    "explain": "Returns struct with coords of _relative_ distances from center. xmin and ymin are _negative_.",
    "return": "Struct with \"xmin\", \"xmax\", \"ymin\", \"ymax\".",
    "error": [
      "\"Invalid parameter\"",
      "\"Multi Graphic not found\""
    ],
    "related": "Multi",
    "_name": "GetMultiDimensions"
    },
  
  {
    "prototype": "FindSubstance( container, objtype, amount, makeinuse := 0, flags := 0 )",
    "parameter": [
      {
        "_name": "container",
        "_value": "Container reference"
      },
      {
        "_name": "objtype",
        "_value": "Integer objtype to find"
      },
      {
        "_name": "amount",
        "_value": "Integer"
      },
      {
        "_name": "makeinuse",
        "_value": "Integer (0/1)"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Search the given container for items of objtype in an amount equal or greater than the amount given (stackables can return greater than #).",
      "If makeinuse is set to 1, then the items will be reserved.",
      {
        "code": "// FindSubstance constants\nconst FINDSUBSTANCE_IGNORE_LOCKED := 0x1; // Find matches in locked containers\nconst FINDSUBSTANCE_ROOT_ONLY     := 0x2; // Do not find matches in sub-containers.\nconst FINDSUBSTANCE_FIND_ALL      := 0x4; // Find all matches ignoring given amount",
        "__text": "uo.em constants for flags:"
      }
    ],
    "return": "If sufficient # of items have been found, those found (and possibly reserved) will be returned in an array.",
    "error": [
      "\"Invalid parameter type\"",
      "\"That is not a container\"",
      "\"Amount cannot be negative\"",
      "\"Not enough of that substance in container\""
    ],
    "related": "Container",
    "_name": "FindSubstance"
    },
  
  {
    "prototype": "SecureTradeWin( character, character2 )",
    "parameter": [
      {
        "_name": "character",
        "_value": "Character Reference"
      },
      {
        "_name": "character2",
        "_value": "Character Reference"
      }
    ],
    "explain": "Init secure trade via script over long distances.",
    "return": "1 on success or Error",
    "error": [
      "\"Invalid parameter type\"",
      "\"You can't trade with yourself.\"",
      "\"No client attached.\"",
      "\"Secure trading is unavailable.\"",
      "\"You cannot trade with someone in war mode.\"",
      "\"You cannot trade while in war mode.\"",
      "\"That person is already involved in a trade.\"",
      "\"You are already involved in a trade.\"",
      "\"Ghosts cannot trade items.\"",
      "\"Something goes wrong.\""
    ],
    "related": "Character",
    "_name": "SecureTradeWin"
    },
  
  {
    "prototype": "MoveItemToSecureTradeWin( item, character )",
    "parameter": [
      {
        "_name": "item",
        "_value": "Item Reference"
      },
      {
        "_name": "character",
        "_value": "Character Reference"
      }
    ],
    "explain": "Move item to secure trade window via script.",
    "return": "1 on success or Error",
    "error": [
      "\"Invalid parameter type\"",
      "\"That is immobile\"",
      "\"That item is being used.\"",
      "\"Could not remove item from its container.\"",
      "\"Item was destroyed in CanRemove script\"",
      "\"Item cannot be unequipped\"",
      "\"Item was destroyed in Equip Script\"",
      "\"Item was destroyed in OnRemove script\"",
      "\"Unable to complete trade\"",
      "\"That's too heavy to trade.\"",
      "\"Something went wrong with trade window.\""
    ],
    "related": [
      "Item",
      "Character"
    ],
    "_name": "MoveItemToSecureTradeWin"
    },
  
  {
    "prototype": "Attach( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": "Associates the current script to the character. See Detach() too.",
    "return": "1 on success or Error",
    "error": [
      "\"Invalid parameter\"",
      "\"Another script still attached.\"",
      "\"Another character still attached.\""
    ],
    "related": "Character",
    "_name": "Attach"
    },
  
  {
    "prototype": "ListStaticsAtLocation( x, y, z, flags := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Returns a list of Static or Multi Items at the specified x,y,z.",
      "Use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.",
      {
        "code": "// ListStatics* flags\nconst ITEMS_IGNORE_STATICS      := 0x01;    // Don't list Static Items\nconst ITEMS_IGNORE_MULTIS       := 0x02;    // Don't list Multi Items\n\n// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Structs with members \"x\", \"y\", \"z\", \"objtype\" and \"hue\" or Error.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListStaticsAtLocation"
    },
  
  {
    "prototype": "ListStaticsNearLocation( x, y, z, range, flags := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Searches the world for Static or Multi Items within range squares of (x,y,z).",
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// ListStatics* flags\nconst ITEMS_IGNORE_STATICS      := 0x01;    // Don't list Static Items\nconst ITEMS_IGNORE_MULTIS       := 0x02;    // Don't list Multi Items\n\n// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Structs with members \"x\", \"y\", \"z\", \"objtype\" and \"hue\" or Error.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListStaticsNearLocation"
    },
  
  {
    "prototype": "ListStaticsNearLocationOfType( x, y, z, range, objtype, flags := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "objtype",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      }
    ],
    "explain": [
      "Searches the world for static items within range squares of (x,y,z) of type objtype.",
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// ListStatics* flags\nconst ITEMS_IGNORE_STATICS      := 0x01;    // Don't list Static Items\nconst ITEMS_IGNORE_MULTIS       := 0x02;    // Don't list Multi Items\n\n// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Structs with members \"x\", \"y\", \"z\", \"objtype\" and \"hue\" or Error.",
    "error": [
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListStaticsNearLocationOfType"
    },
  
  {
    "prototype": "ListStaticsNearLocationWithFlag( x, y, z, range, flags, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "range",
        "_value": "Integer"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Gets an array of items if its graphic matches any of the OR'd flags passed. \"flags\" here are \n    tiledata.mul flags for the item's graphic.",
      {
        "code": "const TILEDATA_FLAG_BACKGROUND  := 0x00000001; //Background\nconst TILEDATA_FLAG_WEAPON      := 0x00000002; //Weapon\nconst TILEDATA_FLAG_TRANSPARENT := 0x00000004; //Transparent\nconst TILEDATA_FLAG_TRANSLUCENT := 0x00000008; //Translucent\nconst TILEDATA_FLAG_WALL        := 0x00000010; //Wall\nconst TILEDATA_FLAG_DAMAGING    := 0x00000020; //Damaging\nconst TILEDATA_FLAG_IMPASSABLE  := 0x00000040; //Impassable\nconst TILEDATA_FLAG_WET         := 0x00000080; //Wet\nconst TILEDATA_FLAG_UNK         := 0x00000100; //Unknown\nconst TILEDATA_FLAG_SURFACE     := 0x00000200; //Surface\nconst TILEDATA_FLAG_BRIDGE      := 0x00000400; //Bridge\nconst TILEDATA_FLAG_STACKABLE   := 0x00000800; //Generic/Stackable\nconst TILEDATA_FLAG_WINDOW      := 0x00001000; //Window\nconst TILEDATA_FLAG_NOSHOOT     := 0x00002000; //No Shoot\nconst TILEDATA_FLAG_PREFIX_A    := 0x00004000; //Prefix A\nconst TILEDATA_FLAG_PREFIX_AN   := 0x00008000; //Prefix An\nconst TILEDATA_FLAG_INTERNAL    := 0x00010000; //Internal (things like hair, beards, etc)\nconst TILEDATA_FLAG_FOLIAGE     := 0x00020000; //Foliage\nconst TILEDATA_FLAG_PARTIAL_HUE := 0x00040000; //Partial Hue\nconst TILEDATA_FLAG_UNK1        := 0x00080000; //Unknown 1\nconst TILEDATA_FLAG_MAP         := 0x00100000; //Map\nconst TILEDATA_FLAG_CONTAINER   := 0x00200000; //Container\nconst TILEDATA_FLAG_WEARABLE    := 0x00400000; //Wearable\nconst TILEDATA_FLAG_LIGHTSOURCE := 0x00800000; //LightSource\nconst TILEDATA_FLAG_ANIMATED    := 0x01000000; //Animated\nconst TILEDATA_FLAG_HOVEROVER   := 0x02000000; //HoverOver (gargoyle flying tiles)\nconst TILEDATA_FLAG_UNK2        := 0x04000000; //Unknown 2\nconst TILEDATA_FLAG_ARMOR       := 0x08000000; //Armor\nconst TILEDATA_FLAG_ROOF        := 0x10000000; //Roof\nconst TILEDATA_FLAG_DOOR        := 0x20000000; //Door\nconst TILEDATA_FLAG_STAIRBACK   := 0x40000000; //StairBack\nconst TILEDATA_FLAG_STAIRRIGHT  := 0x80000000; //StairRight",
        "__text": "Tiledata.mul flags:"
      },
      "Notes: 19 is used for the Z-Range or use LIST_IGNORE_Z constant as Z Parameter to list all Items ignoring Z-Value.\n    Rectangular range is used - x-range and y-range are compared independently.",
      {
        "code": "// special value for List[Items/Mobiles/Statics]*\nconst LIST_IGNORE_Z             := 0x40000000; // Ignore Z-Value and list everything",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Structs with members \"x\", \"y\", \"z\", \"objtype\" and \"hue\" or Error.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListStaticsNearLocationWithFlag"
    },
  
  {
    "prototype": "GetStandingLayers( x, y, flags := MAPDATA_FLAG_ALL, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Returns an Array of standing Layers and blocking Solids.",
      {
        "code": "const MAPDATA_FLAG_NONE         := 0x0000;     // Nothing\nconst MAPDATA_FLAG_MOVELAND     := 0x0001;     // Move Land\nconst MAPDATA_FLAG_MOVESEA      := 0x0002;     // Move Sea\nconst MAPDATA_FLAG_BLOCKSIGHT   := 0x0004;     // Block Sight\nconst MAPDATA_FLAG_OVERFLIGHT   := 0x0008;     // Over Flight (gargoyle flying)\nconst MAPDATA_FLAG_ALLOWDROPON  := 0x0010;     // Allow DropOn\nconst MAPDATA_FLAG_GRADUAL      := 0x0020;     // Gradual\nconst MAPDATA_FLAG_BLOCKING     := 0x0040;     // Blocking\nconst MAPDATA_FLAG_MORE_SOLIDS  := 0x0080;     // List more Solids\n\nconst MAPDATA_FLAG_WALKBLOCK    := 0x0057;     // Move Land, Move Sea, Blocking, Block Sight, Allow DropOn\nconst MAPDATA_FLAG_MOVE_FLAGS   := 0x0063;     // Move Land, Move Sea, Blocking, Gradual\nconst MAPDATA_FLAG_DROP_FLAGS   := 0x0050;     // Blocking, Allow DropOn\nconst MAPDATA_FLAG_ALL          := 0xffffffff; // All",
        "__text": "mapdata flags:"
      }
    ],
    "return": "Array of Structs with members \"z\", \"height\" and \"flags\" at that location or Error.",
    "error": [
      "\"Invalid parameter type\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\""
    ],
    "related": [
      "Character",
      "NPC",
      "Array",
      "Struct"
    ],
    "_name": "GetStandingLayers"
    },
  
  {
    "prototype": "ListStaticsInBox( x1,y1,z1, x2,y2,z2, flags := 0, realm := _DEFAULT_REALM )",
    "parameter": [
      {
        "_name": "x1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "y1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "z1",
        "_value": "integer, for north west upper corner of box"
      },
      {
        "_name": "x2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "y2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "z2",
        "_value": "integer, for south east lower corner of box"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Lists all Static or Multi Items inside an imaginary box.",
      "Notes: This function will not generate \"Invalid Coordinates for realm\" Error, because some Scripter \"loves\" this \"bug\" :o/",
      {
        "code": "// ListStatics* flags\nconst ITEMS_IGNORE_STATICS      := 0x01;    // Don't list Static Items\nconst ITEMS_IGNORE_MULTIS       := 0x02;    // Don't list Multi Items",
        "__text": "Notes: from uo.em constants:"
      }
    ],
    "return": "Array of Structs with members \"x\", \"y\", \"z\" and \"objtype\" or Error.",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\""
    ],
    "related": [
      "Item",
      "Array"
    ],
    "_name": "ListStaticsInBox"
    },
  
  {
    "prototype": "SendStatus( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": "Send full Status Packet to support Extensions like Resistances, if you add'em via Packet Hook. Use SendStatus to update'em.",
    "return": "1 on success or Error",
    "error": [
      "\"Invalid parameter type\"",
      "\"No client attached\"",
      "\"Mobile must not be offline\""
    ],
    "related": "Character",
    "_name": "SendStatus"
    },
  
  {
    "prototype": "MoveObjectToLocation( object, x, y, z, realm := _DEFAULT_REALM, flags := MOVEOBJECT_NORMAL )",
    "parameter": [
      {
        "_name": "object",
        "_value": "Object Reference"
      },
      {
        "_name": "x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "z",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "realm",
        "_value": "String - case-sensitive name of the realm"
      },
      {
        "_name": "flags",
        "_value": "Integer"
      }
    ],
    "explain": [
      "Moves an Object to a location in the world and/or from one realm to another realm.",
      "Function will replace MoveCharacterToLocation(), MoveItemToLocation(), and MoveObjectToRealm().",
      "Currently moves boats, mobiles, and items.",
      "Notes: If MOVEOBJECT_FORCELOCATION is not passed with flags, z-coordinate passed is used as a hint.  \n       The object will be placed on the the ground, or on an item, or on a ship.\n       If it is set, the z location of the object is forced.",
      "Notes: If MOVEITEM_IGNOREMOVABLE is set movable member is ignored.",
      "Notes: If item is equipped, its unequiptest and unequip scripts are run, if any.",
      "Notes: Calls the item's original container's canRemove and onRemove scripts, if any.",
      {
        "code": "// Constants for MoveObjectToLocation\n//\nconst MOVEOBJECT_NORMAL   := 0x0;\nconst MOVEITEM_IGNOREMOVABLE := 0x20000000;\nconst MOVEOBJECT_FORCELOCATION  := 0x40000000;",
        "__text": "uo.em constants for flags:"
      }
    ],
    "return": "1 on success",
    "error": [
      "\"Invalid parameter\"",
      "\"Realm not found\"",
      "\"Invalid Coordinates for Realm\"",
      "\"Can't handle that object type yet.\"",
      "Can't move multis at this time.",
      "Mobile:",
      "\"Can't go there\"",
      "Boat:",
      "\"Position indicated is impassable\"",
      "Item or Container:",
      "\"That is immobile\"",
      "\"That item is being used.\"",
      "\"Location (x, y, z) is out of bounds\"",
      "\"Invalid location selected\"",
      "\"Could not remove item from its container.\"",
      "\"Item was destroyed in CanRemove script\"",
      "\"Item cannot be unequipped\"",
      "\"Item was destroyed in Equip script\"",
      "\"Item was destroyed in OnRemove script\""
    ],
    "related": [
      "Boat",
      "Character",
      "Container",
      "Item",
      "UObject"
    ],
    "_name": "MoveObjectToLocation"
    },
  
  {
    "prototype": "CoordinateDistance(x1, y1, x2, y2)",
    "parameter": [
      {
        "_name": "x1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "x2",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates"
      }
    ],
    "explain": "Calculates the distance between two coordinates.",
    "return": "The distance between two coordinates.",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "CoordinateDistance"
    },
  
  {
    "prototype": "GetCoordsInLine(x1, y1, x2, y2)",
    "parameter": [
      {
        "_name": "x1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y1",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "x2",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "y2",
        "_value": "Integer world coordinates"
      }
    ],
    "explain": "Calculates every coordinate between the two points.",
    "return": "Array of Structs {.x, .y}",
    "error": "\"Invalid parameter type\"",
    "related": "UObject",
    "_name": "GetCoordsInLine"
    },
  
  {
    "prototype": "GetFacing(from_x, from_y, to_x, to_y)",
    "parameter": [
      {
        "_name": "from_x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "from_y",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "to_x",
        "_value": "Integer world coordinates"
      },
      {
        "_name": "to_y",
        "_value": "Integer world coordinates"
      }
    ],
    "explain": "Returns the facing number an object must have in order to face to_x and to_y from from_x and from_y.",
    "return": "Facing number",
    "error": "\"Invalid parameter type\"",
    "related": [
      "Character",
      "NPC",
      "UObject"
    ],
    "_name": "GetFacing"
    },
  
  {
    "prototype": "SendCharacterRaceChanger( character )",
    "parameter": {
      "_name": "character",
      "_value": "Character Reference"
    },
    "explain": "Send Client inside Character Race Changer to change Hair, Beard and Color.",
    "return": "1 on success or Error",
    "error": "\"Invalid parameter\"",
    "related": "Character",
    "_name": "SendCharacterRaceChanger"
    },
  
  {
    "prototype": "IsStackable( item1, item2 )",
    "parameter": [
      {
        "_name": "item1",
        "_value": "Item 1"
      },
      {
        "_name": "item2",
        "_value": "Item 2"
      }
    ],
    "explain": "Compares 2 items to determine if they can be stacked together.",
    "return": "1 if the 2 items can be stacked, 0 if not or Error",
    "error": "\"Invalid parameter\"",
    "related": "Item",
    "_name": "IsStackable"
    },
  
  {
    "prototype": "UpdateItem( item )",
    "parameter": {
      "_name": "item",
      "_value": "Item Reference"
    },
    "explain": "updates the item to every client in range, good to use for example after returning 1 in some packethook and the item get invisible",
    "return": "1 on success or Error",
    "related": "Item",
    "_name": "UpdateItem"
    },
  
  {
    "prototype": "UpdateMobile( mobile, recreate := UPDATEMOBILE_UPDATE )",
    "parameter": [
      {
        "_name": "mobile",
        "_value": "Character Reference"
      },
      {
        "_name": "recreate",
        "_value": "Integer (Optional, 0..1)"
      }
    ],
    "explain": [
      "if flags set to UPDATEMOBILE_UPDATE sends to mobiles in visual range UpdatePlayer packet of mobile, for example to inform of notority changes",
      "if flags set to UPDATEMOBILE_RECREATE sends ReCreate packet (0x78)",
      {
        "code": "const UPDATEMOBILE_RECREATE := 1;\nconst UPDATEMOBILE_UPDATE   := 0;",
        "__text": "uo.em constants:"
      }
    ],
    "return": "1 on success or Error",
    "error": "\"Mobile is offline\"",
    "related": [
      "Character",
      "NPC"
    ],
    "_name": "UpdateMobile"
    },
  
  {
    "prototype": "PlayMovingEffectEx( source, target, effect, speed, duration := 0, hue := 0, render := 0, fixeddirection := 0, explode := 0, effect3d := 0, effect3dexplode := 0, effect3dsound := 0 )",
    "parameter": [
      {
        "_name": "source",
        "_value": "UObject Reference"
      },
      {
        "_name": "target",
        "_value": "UObject Reference"
      },
      {
        "_name": "effect",
        "_value": "Integer"
      },
      {
        "_name": "speed",
        "_value": "Integer (0..255)"
      },
      {
        "_name": "duration",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "hue",
        "_value": "Integer"
      },
      {
        "_name": "render",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "fixeddirection",
        "_value": "Integer (Optional, 0..1)"
      },
      {
        "_name": "explode",
        "_value": "Integer (Optional, 0..1)"
      },
      {
        "_name": "effect3d",
        "_value": "Integer"
      },
      {
        "_name": "effect3dexplode",
        "_value": "Integer (Optional, 0..255)"
      },
      {
        "_name": "effect3dsound",
        "_value": "Integer (Optional, 0..255)"
      }
    ],
    "explain": [
      "Causes a moving effect to be played, travelling from source to destination",
      "effect3d,effect3dexplode,effect3dsound are only interpreted by the 3D client",
      "effect3dexplode and effect3dsound are only interpreted if explode is set, effect3d and effect3dexplode values can be found in client/particles dir.",
      "Notes: effect = an item graphic number (the first in a series if an animation) \n       speed = how fast the effect should travel. \n       explode = 0/1 show an explosion at destination at the end of the effect?\n       hue = which color should the effect have?\n       fixeddirection = 0/1 should the effect change his facing?",
      "render values are:",
      "0 no change",
      "1 It becomes dark",
      "2 It becomes bright",
      "3 Bright color is emphasized and dark color is converted transparently",
      "4 The translucency (transparency is high)",
      "5 The translucency (it is close to primary color)",
      "6 Negative positive reversal",
      "7 The background which is transparent negative positive reversal"
    ],
    "return": "1 on success",
    "error": "\"Realms must match\"",
    "related": "UObject",
    "_name": "PlayMovingEffectEx"
    },
}